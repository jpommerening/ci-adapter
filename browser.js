(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ciAdapter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _toConsumableArray(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)}function Adapter(e){return this instanceof Adapter?void 0:new Adapter(e)}function combine(){function e(e){return function(r){var t=!0,n=!1,u=void 0;try{for(var i,o=r[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var l=i.value;a.set(l,e)}}catch(s){n=!0,u=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw u}}return r}}function r(r){return r.getBuilders().then(e(r))}for(var t=arguments.length,n=Array(t),u=0;t>u;u++)n[u]=arguments[u];var a=new Map;return{getInfo:function(){return Promise.all(n.map(function(e){return e.getInfo()})).then(function(e){return{name:e.map(function(e){return e.name}).join(", "),data:e}})},getBuilders:function(){return Promise.all(n.map(r)).then(function(e){var r;return(r=[]).concat.apply(r,_toConsumableArray(e))})},getBuilds:function(r){var t=a.get(r);return t.getBuilds(r).then(e(t))}}}function cache(e,r){function t(e,r){return function(){var t=r.apply(this,arguments),n=a.get(t)||e.apply(this,arguments);return a.set(t,n),n}}function n(){var e=arguments.length<=0||void 0===arguments[0]?"id":arguments[0],r={},t=0;return function(){var n=arguments.length<=0||void 0===arguments[0]?r:arguments[0];return u.has(n)||u.set(n,e+t++),u.get(n)}}var u=new WeakMap,a=new _lruCache2["default"](r);return Object.create(e,{getInfo:{value:t(e.getInfo,n("info"))},getBuilders:{value:t(e.getBuilders,n("builders"))},getBuilds:{value:t(e.getBuilds,n("builds"))}})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Adapter=Adapter,exports.combine=combine,exports.cache=cache;var _lruCache=require("lru-cache"),_lruCache2=_interopRequireDefault(_lruCache);Adapter.prototype.getInfo=function(){return Promise.resolve({builders:[]})},Adapter.prototype.getBuilder=function(e){return Promise.resolve({name:e,builds:[]})},Adapter.prototype.getBuild=function(e,r){return Promise.resolve({name:e,number:r})},Adapter.prototype.getBuilders=function(){var e=this;return this.getInfo().then(function(r){return Promise.all(r.builders.map(function(r){return e.getBuilder(r)}))})},Adapter.prototype.getBuilds=function(e){var r=this;return this.getBuilder(e).then(function(t){return Promise.all(t.builds.map(function(t){return r.getBuild(e,t)}))})},Adapter.prototype.getAllBuilds=function(){var e=this;return this.getInfo().then(function(r){return Promise.all(r.builders.map(function(r){return e.getBuilds(r)}))}).then(function(e){var r;return(r=[]).concat.apply(r,_toConsumableArray(e))})};

},{"lru-cache":9}],2:[function(require,module,exports){
"use strict";if(!window.fetch)throw new Error("Browser has no fetch. Please use a polyfill!");module.exports=window.fetch;

},{}],3:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function Buildbot(e){function t(){return(0,_fetch2["default"])(e+"/json",f).then(a).then(l)}function n(e){return t().then(function(t){var n=_urlTemplate2["default"].parse(t.builders_url),r=n.expand({name:e});return(0,_fetch2["default"])(r,f).then(a).then(function(t){return i(e,t)})})}function r(){return t().then(function(e){var t=_urlTemplate2["default"].parse(e.builders_url),n=t.expand({});return(0,_fetch2["default"])(n,f)}).then(a).then(function(e){return Object.keys(e).map(function(t){return i(t,e[t])})})}function u(e,t){return n(e).then(function(e){var n=_urlTemplate2["default"].parse(e.builds_url),r=n.expand({number:t});return(0,_fetch2["default"])(r,f).then(a).then(c)})}function s(e){var t=e.builds,n=_urlTemplate2["default"].parse(e.builds_url),r=n.expand({select:t});return(0,_fetch2["default"])(r,f).then(a).then(function(e){var t={};return Object.keys(e).map(function(t){return e[t]}).filter(function(e){var n=e.number;return t[n]?!1:t[n]=!0})}).then(function(e){return e.map(c)})}function a(e){return 200===e.status?e.json():e.text().then(function(t){return Promise.reject(new Error(e.status+" "+e.statusText+": "+t))})}function l(t){var n=t.project.title,r=Object.keys(t.builders),u=t;return{name:n,url:e+"/json",html_url:e,builders_url:e+"/json/builders{/name}",builders:r,data:u}}function i(t,n){var r=[-1].concat(n.cachedBuilds),u=n;return{name:t,url:e+"/json/builders/"+t,html_url:e+"/builders/"+t,builds_url:e+"/json/builders/"+t+"/builds{/number}{?select*}",builds:r,data:u}}function c(t){var n=t.builderName,r=t.number,u=t.times[0]&&!t.times[1],s=t;return{name:n,number:r,url:e+"/json/builders/"+n+"/builds/"+r,html_url:e+"/builders/"+n+"/builds/"+r,state:u?_constants.PENDING:BUILDBOT_STATE_LIST[t.results||0]||_constants.UNKNOWN,start:new Date(1e3*t.times[0]),end:u?null:new Date(1e3*t.times[1]),data:s}}var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],d=o.headers,_=Object.assign({Accept:BUILDBOT_MEDIA_TYPE,"User-Agent":_constants.USER_AGENT},d),f={headers:_};return{getInfo:t,getBuilder:n,getBuilders:r,getBuild:u,getBuilds:s}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Buildbot;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_constants=require("./constants"),BUILDBOT_MEDIA_TYPE="application/json",BUILDBOT_STATE_LIST=[_constants.SUCCESS,_constants.WARNING,_constants.FAILURE,_constants.UNKNOWN,_constants.ERRORED,_constants.ERRORED];

},{"./constants":4,"./fetch":2,"url-template":10}],4:[function(require,module,exports){
(function (process){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var pkg=require("../package.json"),PENDING=exports.PENDING="pending",SUCCESS=exports.SUCCESS="success",WARNING=exports.WARNING="warning",FAILURE=exports.FAILURE="failure",ERRORED=exports.ERRORED="errored",ABORTED=exports.ABORTED="aborted",UNKNOWN=exports.UNKNOWN="unknown",state=exports.state={PENDING:PENDING,SUCCESS:SUCCESS,WARNING:WARNING,FAILURE:FAILURE,ERRORED:ERRORED,ABORTED:ABORTED,UNKNOWN:UNKNOWN},VERSION=exports.VERSION=pkg.version,USER_AGENT_DETAILS=exports.USER_AGENT_DETAILS="undefined"!=typeof navigator?navigator.userAgent:"Node.js "+process.version,USER_AGENT=exports.USER_AGENT="CI-Adapter/"+pkg.version+" (+"+pkg.homepage+") "+USER_AGENT_DETAILS;

}).call(this,require('_process'))

},{"../package.json":11,"_process":8}],5:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Travis=exports.Jenkins=exports.Buildbot=exports.Adapter=exports.state=exports.urltemplate=exports.combine=exports.cache=void 0;var _adapter=require("./adapter"),_constants=require("./constants"),_buildbot=require("./buildbot"),_buildbot2=_interopRequireDefault(_buildbot),_jenkins=require("./jenkins"),_jenkins2=_interopRequireDefault(_jenkins),_travis=require("./travis"),_travis2=_interopRequireDefault(_travis),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate);exports.cache=_adapter.cache,exports.combine=_adapter.combine,exports.urltemplate=_urlTemplate2["default"],exports.state=_constants.state,exports.Adapter=_adapter.Adapter,exports.Buildbot=_buildbot2["default"],exports.Jenkins=_jenkins2["default"],exports.Travis=_travis2["default"];

},{"./adapter":1,"./buildbot":3,"./constants":4,"./jenkins":6,"./travis":7,"url-template":10}],6:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function Jenkins(e){function t(){return(0,_fetch2["default"])(e+"/api/json",_).then(i).then(s)}function n(e){return t().then(function(t){var n=_urlTemplate2["default"].parse(t.builders_url),r=n.expand({name:e});return(0,_fetch2["default"])(r,_)}).then(i).then(l)}function r(){return t().then(function(t){var n=e+"/api/json?tree=jobs[name,buildable,builds[number]{,10}],views[name,jobs[name]]";return(0,_fetch2["default"])(n,_)}).then(i).then(function(e){var t=m?function(e){return e.name===m}:function(){return!0},n=e.views.filter(t)[0].jobs.map(function(e){return e.name});return e.jobs.filter(function(e){return n.indexOf(e.name)>=0&&e.buildable}).map(l)})}function u(e,t){return n(e).then(function(e){var n=_urlTemplate2["default"].parse(e.builds_url),r=n.expand({number:t});return(0,_fetch2["default"])(r,_).then(i).then(function(t){return o(e.data,t)})})}function a(e){return Promise.all(e.builds.map(function(t){var n=_urlTemplate2["default"].parse(e.builds_url),r=n.expand({number:t});return(0,_fetch2["default"])(r,_).then(i).then(function(t){return o(e.data,t)})}))}function i(e){return 200===e.status?e.json():e.text().then(function(t){return Promise.reject(new Error(e.status+" "+e.statusText+": "+t))})}function s(t){var n=t.nodeName,r=t.jobs.map(function(e){return e.name}),u=t;return{name:n,url:e+"/api/json",html_url:e,builders_url:e+"/job{/name}/api/json{?tree}",builders:r,data:u}}function l(t){var n=t.name,r=t.builds.map(function(e){return e.number}),u=t;return{data:u,name:n,url:e+"/job/"+n+"/api/json",html_url:e+"/job/"+n,builds_url:e+"/job/"+n+"/{number}/api/json{?tree}",builds:r}}function o(t,n){var r=t.name,u=n.number,a=n.building,i=n;return{name:r,number:u,url:e+"/job/"+r+"/"+u+"/api/json",html_url:e+"/job/"+r+"/"+u,state:a?_constants.PENDING:JENKINS_STATE_MAP[n.result]||_constants.UNKNOWN,start:new Date(n.timestamp),end:a?null:new Date(n.timestamp+n.duration),data:i}}var f=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],c=f.headers,m=f.view,d=Object.assign({Accept:JENKINS_MEDIA_TYPE,"User-Agent":_constants.USER_AGENT},c),_={headers:d};return{getInfo:t,getBuilder:n,getBuilders:r,getBuild:u,getBuilds:a}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Jenkins;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_constants=require("./constants"),JENKINS_MEDIA_TYPE="application/json",JENKINS_STATE_MAP={SUCCESS:_constants.SUCCESS,UNSTABLE:_constants.WARNING,FAILURE:_constants.FAILURE};

},{"./constants":4,"./fetch":2,"url-template":10}],7:[function(require,module,exports){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function getHtmlUrl(t){var e=TRAVIS_HTML_URL.exec(t);return e[1]+(e[3]||e[5])+(e[6]||"")}function Travis(t){function e(e){return A||(A=(0,_fetch2["default"])(t+"/auth/github",{method:"post",headers:Object.assign({},m.headers,{"Content-Type":"application/json"}),body:JSON.stringify({github_token:e})}).then(function(t){return 200!==t.status?t.text().then(function(t){return Promise.reject(new Error(t))}):t.json()}).then(function(t){var e=t.access_token;return m.headers.Authorization="token "+e,e}))}function n(){return(f?e(f):Promise.resolve(null)).then(function(){return(0,_fetch2["default"])(t+"/repos/"+p,m)}).then(i).then(o)}function r(t){return n().then(function(e){var n=e.data.repos.find(function(e){return e.slug.split("/").pop()===t});return l(n)})}function u(){return n().then(function(t){var e=t.data.repos.filter(function(e){return t.builders.indexOf(e.slug.split("/").pop()>=0)});return e.map(l)})}function a(t,e){return r(t).then(function(t){var n=_urlTemplate2["default"].parse(t.builds_url),r=n.expand({number:e});return(0,_fetch2["default"])(r,m).then(i).then(function(e){return c(t.data,e.builds[0])})})}function s(t){return Promise.all(t.builds.map(function(e){var n=_urlTemplate2["default"].parse(t.builds_url),r=n.expand({number:e});return(0,_fetch2["default"])(r,m).then(function(t){return t.json()})})).then(function(e){var n=[].concat.apply([],e.map(function(t){return t.builds}));return n.map(function(e){return c(t.data,e)})})}function i(t){return 200===t.status?t.json():t.text().then(function(e){return Promise.reject(new Error(t.status+" "+t.statusText+": "+e))})}function o(e){var n="Travis CI - "+p+" ("+t+")",r=e.repos.filter(function(t){return null!==t.last_build_number}).map(function(t){return t.slug.split("/")[1]});return{name:n,url:t+"/repos/"+p,html_url:T+"/"+p,builders_url:t+"/repos/"+p+"{/name}{?ids}",builders:r,data:e}}function l(e){var n=e.slug,r=n.split("/").pop(),u=parseInt(e.last_build_number,10),a=[0,1,2,3,4,5,6,7,8,9,10].map(function(t){return u-t}).filter(function(t){return t>=0}),s=e;return{name:r,url:t+"/repos/"+n,html_url:T+"/"+n,builds_url:t+"/repos/"+n+"/builds{?number,after_number}",builds:a,data:s}}function c(e,n){var r=e.slug,u=r.split("/").pop(),a=parseInt(n.number,10),s=TRAVIS_STATE_MAP[n.state]===_constants.PENDING,i=n;return{name:u,number:a,url:t+"/repos/"+r+"/builds/"+n.id,html_url:T+"/"+r+"/builds/"+n.id,state:TRAVIS_STATE_MAP[n.state],start:new Date(n.started_at),end:s?null:new Date(n.finished_at),data:i}}var _=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],d=_.headers,f=_.github_token,p=_.account,h=Object.assign({Accept:TRAVIS_MEDIA_TYPE,"User-Agent":TRAVIS_USER_AGENT},d),m={headers:h},T=getHtmlUrl(t),A=void 0;return{getInfo:n,getBuilder:r,getBuilders:u,getBuild:a,getBuilds:s}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Travis;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_constants=require("./constants"),TRAVIS_API_VERSION=2,TRAVIS_MEDIA_TYPE="application/vnd.travis-ci."+TRAVIS_API_VERSION+"+json",TRAVIS_USER_AGENT="Travis/"+TRAVIS_API_VERSION+" "+_constants.USER_AGENT,TRAVIS_HTML_URL=/^(https?:\/\/)(api\.(travis-ci\.(org|com))|([^\/]+)\/api)(\/.+)?$/,TRAVIS_STATE_MAP={received:_constants.PENDING,created:_constants.PENDING,queued:_constants.PENDING,started:_constants.PENDING,passed:_constants.SUCCESS,failed:_constants.FAILURE,errored:_constants.ERRORED,canceled:_constants.ABORTED};

},{"./constants":4,"./fetch":2,"url-template":10}],8:[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],9:[function(require,module,exports){
!function(){function t(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function e(){return 1}function i(t){_||"string"==typeof t||"number"==typeof t||(_=!0,console.error(new TypeError("LRU: key must be a string or number. Almost certainly a bug! "+typeof t).stack))}function h(t){return this instanceof h?("number"==typeof t&&(t={max:t}),t||(t={}),this._max=t.max,(!this._max||"number"!=typeof this._max||this._max<=0)&&(this._max=1/0),this._lengthCalculator=t.length||e,"function"!=typeof this._lengthCalculator&&(this._lengthCalculator=e),this._allowStale=t.stale||!1,this._maxAge=t.maxAge||null,this._dispose=t.dispose,void this.reset()):new h(t)}function s(t,e,h){i(e);var s=t._cache[e];return s&&(r(t,s)?(a(t,s),t._allowStale||(s=void 0)):h&&n(t,s),s&&(s=s.value)),s}function r(t,e){if(!e||!e.maxAge&&!t._maxAge)return!1;var i=!1,h=Date.now()-e.now;return i=e.maxAge?h>e.maxAge:t._maxAge&&h>t._maxAge}function n(t,e){u(t,e),e.lu=t._mru++,t._lruList[e.lu]=e}function o(t){for(;t._lru<t._mru&&t._length>t._max;)a(t,t._lruList[t._lru])}function u(t,e){for(delete t._lruList[e.lu];t._lru<t._mru&&!t._lruList[t._lru];)t._lru++}function a(t,e){e&&(t._dispose&&t._dispose(e.key,e.value),t._length-=e.length,t._itemCount--,delete t._cache[e.key],u(t,e))}function l(t,e,i,h,s,r){this.key=t,this.value=e,this.lu=i,this.length=h,this.now=s,r&&(this.maxAge=r)}"object"==typeof module&&module.exports?module.exports=h:this.LRUCache=h;var _=!1;Object.defineProperty(h.prototype,"max",{set:function(t){(!t||"number"!=typeof t||0>=t)&&(t=1/0),this._max=t,this._length>this._max&&o(this)},get:function(){return this._max},enumerable:!0}),Object.defineProperty(h.prototype,"lengthCalculator",{set:function(t){if("function"!=typeof t){this._lengthCalculator=e,this._length=this._itemCount;for(var i in this._cache)this._cache[i].length=1}else{this._lengthCalculator=t,this._length=0;for(var i in this._cache)this._cache[i].length=this._lengthCalculator(this._cache[i].value),this._length+=this._cache[i].length}this._length>this._max&&o(this)},get:function(){return this._lengthCalculator},enumerable:!0}),Object.defineProperty(h.prototype,"length",{get:function(){return this._length},enumerable:!0}),Object.defineProperty(h.prototype,"itemCount",{get:function(){return this._itemCount},enumerable:!0}),h.prototype.forEach=function(t,e){e=e||this;for(var i=0,h=this._itemCount,s=this._mru-1;s>=0&&h>i;s--)if(this._lruList[s]){i++;var n=this._lruList[s];r(this,n)&&(a(this,n),this._allowStale||(n=void 0)),n&&t.call(e,n.value,n.key,this)}},h.prototype.keys=function(){for(var t=new Array(this._itemCount),e=0,i=this._mru-1;i>=0&&e<this._itemCount;i--)if(this._lruList[i]){var h=this._lruList[i];t[e++]=h.key}return t},h.prototype.values=function(){for(var t=new Array(this._itemCount),e=0,i=this._mru-1;i>=0&&e<this._itemCount;i--)if(this._lruList[i]){var h=this._lruList[i];t[e++]=h.value}return t},h.prototype.reset=function(){if(this._dispose&&this._cache)for(var t in this._cache)this._dispose(t,this._cache[t].value);this._cache=Object.create(null),this._lruList=Object.create(null),this._mru=0,this._lru=0,this._length=0,this._itemCount=0},h.prototype.dump=function(){for(var t=[],e=0,i=this._mru-1;i>=0&&e<this._itemCount;i--)if(this._lruList[i]){var h=this._lruList[i];r(this,h)||(++e,t.push({k:h.key,v:h.value,e:h.now+(h.maxAge||0)}))}return t},h.prototype.dumpLru=function(){return this._lruList},h.prototype.set=function(e,h,s){s=s||this._maxAge,i(e);var r=s?Date.now():0,n=this._lengthCalculator(h);if(t(this._cache,e))return n>this._max?(a(this,this._cache[e]),!1):(this._dispose&&this._dispose(e,this._cache[e].value),this._cache[e].now=r,this._cache[e].maxAge=s,this._cache[e].value=h,this._length+=n-this._cache[e].length,this._cache[e].length=n,this.get(e),this._length>this._max&&o(this),!0);var u=new l(e,h,this._mru++,n,r,s);return u.length>this._max?(this._dispose&&this._dispose(e,h),!1):(this._length+=u.length,this._lruList[u.lu]=this._cache[e]=u,this._itemCount++,this._length>this._max&&o(this),!0)},h.prototype.has=function(e){if(i(e),!t(this._cache,e))return!1;var h=this._cache[e];return r(this,h)?!1:!0},h.prototype.get=function(t){return i(t),s(this,t,!0)},h.prototype.peek=function(t){return i(t),s(this,t,!1)},h.prototype.pop=function(){var t=this._lruList[this._lru];return a(this,t),t||null},h.prototype.del=function(t){i(t),a(this,this._cache[t])},h.prototype.load=function(t){this.reset();for(var e=Date.now(),h=t.length-1;h>=0;h--){var s=t[h];i(s.k);var r=s.e||0;if(0===r)this.set(s.k,s.v);else{var n=r-e;n>0&&this.set(s.k,s.v,n)}}}}();

},{}],10:[function(require,module,exports){
!function(e,n){"object"==typeof exports?module.exports=n():"function"==typeof define&&define.amd?define([],n):e.urltemplate=n()}(this,function(){function e(){}return e.prototype.encodeReserved=function(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e)),e}).join("")},e.prototype.encodeValue=function(e,n,t){return n="+"===e||"#"===e?this.encodeReserved(n):encodeURIComponent(n),t?encodeURIComponent(t)+"="+n:n},e.prototype.isDefined=function(e){return void 0!==e&&null!==e},e.prototype.isKeyOperator=function(e){return";"===e||"&"===e||"?"===e},e.prototype.getValues=function(e,n,t,o){var i=e[t],r=[];if(this.isDefined(i)&&""!==i)if("string"==typeof i||"number"==typeof i||"boolean"==typeof i)i=i.toString(),o&&"*"!==o&&(i=i.substring(0,parseInt(o,10))),r.push(this.encodeValue(n,i,this.isKeyOperator(n)?t:null));else if("*"===o)Array.isArray(i)?i.filter(this.isDefined).forEach(function(e){r.push(this.encodeValue(n,e,this.isKeyOperator(n)?t:null))},this):Object.keys(i).forEach(function(e){this.isDefined(i[e])&&r.push(this.encodeValue(n,i[e],e))},this);else{var s=[];Array.isArray(i)?i.filter(this.isDefined).forEach(function(e){s.push(this.encodeValue(n,e))},this):Object.keys(i).forEach(function(e){this.isDefined(i[e])&&(s.push(encodeURIComponent(e)),s.push(this.encodeValue(n,i[e].toString())))},this),this.isKeyOperator(n)?r.push(encodeURIComponent(t)+"="+s.join(",")):0!==s.length&&r.push(s.join(","))}else";"===n?r.push(encodeURIComponent(t)):""!==i||"&"!==n&&"?"!==n?""===i&&r.push(""):r.push(encodeURIComponent(t)+"=");return r},e.prototype.parse=function(e){var n=this,t=["+","#",".","/",";","?","&"];return{expand:function(o){return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,i,r){if(i){var s=null,u=[];if(-1!==t.indexOf(i.charAt(0))&&(s=i.charAt(0),i=i.substr(1)),i.split(/,/g).forEach(function(e){var t=/([^:\*]*)(?::(\d+)|(\*))?/.exec(e);u.push.apply(u,n.getValues(o,s,t[1],t[2]||t[3]))}),s&&"+"!==s){var p=",";return"?"===s?p="&":"#"!==s&&(p=s),(0!==u.length?s:"")+u.join(p)}return u.join(",")}return n.encodeReserved(r)})}}},new e});

},{}],11:[function(require,module,exports){
module.exports={
  "name": "ci-adapter",
  "version": "0.1.3",
  "description": "Uniform access to a bunch of continuous integration providers",
  "homepage": "https://github.com/jpommerening/ci-adapter",
  "author": "Jonas Pommerening",
  "license": "MIT",
  "keywords": [
    "ci",
    "buildbot",
    "travis",
    "jenkis",
    "status"
  ],
  "main": "./lib",
  "browser": {
    "./lib/fetch.js": "./lib/browser-fetch.js"
  },
  "scripts": {
    "prepublish": "babel -d lib src && browserify -o browser.js -t [ uglifyify -c ] -g uglifyify --debug -s ci-adapter ./lib/index.js",
    "test": "mocha --compilers js:babel-core/register"
  },
  "dependencies": {
    "lru": "^1.0.0",
    "lru-cache": "^2.7.0",
    "node-fetch": "^1.3.3",
    "url-template": "^2.0.6"
  },
  "devDependencies": {
    "babel-cli": "^6.1.1",
    "babel-core": "^6.0.20",
    "babel-preset-es2015": "^6.0.15",
    "browserify": "^12.0.1",
    "expect.js": "^0.3.1",
    "mocha": "^2.3.3",
    "uglifyify": "^3.0.1"
  },
  "babel": {
    "presets": [
      "es2015"
    ],
    "sourceMaps": "inline"
  }
}

},{}]},{},[5])(5)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
