(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ciAdapter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)}function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function combine(){function e(e){return function(r){var t=!0,n=!1,o=void 0;try{for(var u,s=r[Symbol.iterator]();!(t=(u=s.next()).done);t=!0){var i=u.value;a.set(i,e)}}catch(l){n=!0,o=l}finally{try{!t&&s["return"]&&s["return"]()}finally{if(n)throw o}}return r}}function r(r){return r.getBuilders().then(e(r))}for(var t=arguments.length,n=Array(t),o=0;t>o;o++)n[o]=arguments[o];var a=new Map;return{getBuilders:function(){return Promise.all(n.map(r)).then(function(e){var r;return(r=[]).concat.apply(r,_toConsumableArray(e))})},getBuilds:function(r){var t=a.get(r);return t.getBuilds(r).then(e(t))}}}var _createClass=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}();Object.defineProperty(exports,"__esModule",{value:!0}),exports.combine=combine;var PENDING=exports.PENDING="pending",SUCCESS=exports.SUCCESS="success",WARNING=exports.WARNING="warning",FAILURE=exports.FAILURE="failure",ERRORED=exports.ERRORED="errored",ABORTED=exports.ABORTED="aborted",UNKNOWN=exports.UNKNOWN="unknown",state=exports.state={PENDING:PENDING,SUCCESS:SUCCESS,WARNING:WARNING,FAILURE:FAILURE,ERRORED:ERRORED,ABORTED:ABORTED,UNKNOWN:UNKNOWN},Adapter=exports.Adapter=function(){function e(r){_classCallCheck(this,e)}return _createClass(e,[{key:"getInfo",value:function(){return Promise.resolve({})}},{key:"getBuilders",value:function(){return Promise.resolve([])}},{key:"getBuilds",value:function(e){return Promise.resolve([])}}]),e}();

},{}],2:[function(require,module,exports){
"use strict";if(!window.fetch)throw new Error("Browser has no fetch. Please use a polyfill!");module.exports=window.fetch;

},{}],3:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function Buildbot(e){function t(){return(0,_fetch2["default"])(e+"/json",i).then(function(e){return e.json()}).then(function(t){return{name:t.project.title,url:e+"/json",html_url:e,builders_url:e+"/json/builders{/name}",builders:Object.keys(t.builders),data:t}})}function r(){return t().then(function(e){var t=_urlTemplate2["default"].parse(e.builders_url),r=t.expand({});return(0,_fetch2["default"])(r,i)}).then(function(e){return e.json()}).then(function(t){return Object.keys(t).map(function(r){var u=r,n=t[r];return{name:u,url:e+"/json/builders/"+u,html_url:e+"/builders/"+u,builds_url:e+"/json/builders/"+u+"/builds{/number}{?select*}",data:n}})})}function u(t){var r=[-1].concat(t.data.cachedBuilds),u=_urlTemplate2["default"].parse(t.builds_url),n=u.expand({select:r});return(0,_fetch2["default"])(n,i).then(function(e){return e.json()}).then(function(r){var u={};return Object.keys(r).map(function(e){return r[e]}).filter(function(e){var t=e.number;return u[t]?!1:u[t]=!0}).map(function(r){var u=r.times[0]&&!r.times[1];return{name:t.name,number:r.number,url:e+"/json/builders/"+t.name+"/builds/"+r.number,html_url:e+"/builders/"+t.name+"/builds/"+r.number,state:u?_adapter.PENDING:BUILDBOT_STATE_LIST[r.results||0]||_adapter.UNKNOWN,start:new Date(1e3*r.times[0]),end:u?null:new Date(1e3*r.times[1]),data:r}})})}var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=n.headers,l=Object.assign({Accept:BUILDBOT_MEDIA_TYPE},a),i={headers:l};return{getInfo:t,getBuilders:r,getBuilds:u}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Buildbot;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_adapter=require("./adapter"),BUILDBOT_MEDIA_TYPE="application/json",BUILDBOT_STATE_LIST=[_adapter.SUCCESS,_adapter.WARNING,_adapter.FAILURE,_adapter.UNKNOWN,_adapter.ERRORED,_adapter.ERRORED];

},{"./adapter":1,"./fetch":2,"url-template":7}],4:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Travis=exports.Jenkins=exports.Buildbot=exports.Adapter=exports.state=exports.urltemplate=exports.combine=void 0;var _adapter=require("./adapter"),_buildbot=require("./buildbot"),_buildbot2=_interopRequireDefault(_buildbot),_jenkins=require("./jenkins"),_jenkins2=_interopRequireDefault(_jenkins),_travis=require("./travis"),_travis2=_interopRequireDefault(_travis),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate);exports.combine=_adapter.combine,exports.urltemplate=_urlTemplate2["default"],exports.state=_adapter.state,exports.Adapter=_adapter.Adapter,exports.Buildbot=_buildbot2["default"],exports.Jenkins=_jenkins2["default"],exports.Travis=_travis2["default"];

},{"./adapter":1,"./buildbot":3,"./jenkins":5,"./travis":6,"url-template":7}],5:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function Jenkins(e){function n(){return(0,_fetch2["default"])(e+"/api/json",l).then(function(e){return e.json()}).then(function(n){return{name:n.nodeName,url:e+"/api/json",html_url:e,builders_url:e+"/job{/name}/api/json{?tree}",builders:n.jobs.map(function(e){return e.name}),data:n}})}function t(){return n().then(function(n){var t=e+"/api/json?tree=jobs[name,builds[number]{,10}],views[name,jobs[name]]";return(0,_fetch2["default"])(t,l)}).then(function(e){return e.json()}).then(function(n){return n.jobs.map(function(t){var r=t.name;return{name:r,url:e+"/job/"+r+"/api/json",html_url:e+"/job/"+r,builds_url:e+"/job/"+r+"/{number}/api/json{?tree}",builds:t.builds.map(function(e){return e.number}),data:n}})})}function r(n){return Promise.all(n.builds.map(function(e){var t=_urlTemplate2["default"].parse(n.builds_url),r=t.expand({number:e});return(0,_fetch2["default"])(r,l).then(function(e){return e.json()})})).then(function(t){return t.map(function(t){var r=t.building;return{name:n.name,number:t.number,url:e+"/job/"+n.name+"/"+t.number+"/api/json",html_url:e+"/job/"+n.name+"/"+t.number,state:r?_adapter.PENDING:JENKINS_STATE_MAP[t.result]||_adapter.UNKNOWN,start:new Date(t.timestamp),end:r?null:new Date(t.timestamp+t.duration),data:t}})})}var u=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=u.headers,i=Object.assign({Accept:JENKINS_MEDIA_TYPE},a),l={headers:i};return l.headers=Object.assign({},l.headers,i),{getInfo:n,getBuilders:t,getBuilds:r}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Jenkins;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_adapter=require("./adapter"),JENKINS_MEDIA_TYPE="application/json",JENKINS_STATE_MAP={SUCCESS:_adapter.SUCCESS,UNSTABLE:_adapter.WARNING,FAILURE:_adapter.FAILURE};

},{"./adapter":1,"./fetch":2,"url-template":7}],6:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function getHtmlUrl(e){var t=TRAVIS_HTML_URL.exec(e);return t[1]+(t[3]||t[5])+(t[6]||"")}function Travis(e){function t(){return(0,_fetch2["default"])(e+"/auth/github",{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({github_token:l})}).then(function(e){return e.json()}).then(function(e){var t=e.access_token;return d.headers.Authorization="token "+t,t})}function r(){return t().then(function(t){return(0,_fetch2["default"])(e+"/repos/"+s,d)}).then(function(e){return e.json()}).then(function(t){return{name:"Travis CI - "+s+" ("+e+")",url:e+"/repos/"+s,html_url:p+"/"+s,builders_url:e+"/repos/"+s+"{/name}{?ids}",builders:t.repos.map(function(e){return e.slug.split("/")[1]}),data:t}})}function n(){return r().then(function(t){var r=t.data.repos.filter(function(e){return null!==e.last_build_number});return r.map(function(t){var r=t.slug,n=r.split("/")[1],a=parseInt(t.last_build_number,10),u=[0,1,2,3,4,5,6,7,8,9,10].map(function(e){return a-e}).filter(function(e){return e>=0});return{name:n,url:e+"/repos/"+r,html_url:p+"/"+r,builds_url:e+"/repos/"+r+"/builds{?number,after_number}",builds:u,data:t}})})}function a(t){return Promise.all(t.builds.map(function(e){var r=_urlTemplate2["default"].parse(t.builds_url),n=r.expand({number:e});return(0,_fetch2["default"])(n,d).then(function(e){return e.json()})})).then(function(r){var n=[].concat.apply([],r.map(function(e){return e.builds}));return n.map(function(r){var n=TRAVIS_STATE_MAP[r.state]===_adapter.PENDING;return{name:t.name,number:parseInt(r.number,10),url:e+"/repos/"+s+"/"+t.name+"/builds/"+r.id,html_url:p+"/"+s+"/"+t.name+"/builds/"+r.id,state:TRAVIS_STATE_MAP[r.state],start:new Date(r.started_at),end:n?null:new Date(r.finished_at),data:r}})})}var u=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=u.headers,l=u.github_token,s=u.account,o=Object.assign({Accept:TRAVIS_MEDIA_TYPE},i),d={headers:o},p=getHtmlUrl(e);return{getInfo:r,getBuilders:n,getBuilds:a}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Travis;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_adapter=require("./adapter"),TRAVIS_MEDIA_TYPE="application/vnd.travis-ci.2+json",TRAVIS_HTML_URL=/^(https?:\/\/)(api\.(travis-ci\.(org|com))|([^\/]+)\/api)(\/.+)?$/,TRAVIS_STATE_MAP={received:_adapter.PENDING,created:_adapter.PENDING,queued:_adapter.PENDING,started:_adapter.PENDING,passed:_adapter.SUCCESS,failed:_adapter.FAILURE,errored:_adapter.ERRORED,canceled:_adapter.ABORTED};

},{"./adapter":1,"./fetch":2,"url-template":7}],7:[function(require,module,exports){
!function(e,n){"object"==typeof exports?module.exports=n():"function"==typeof define&&define.amd?define([],n):e.urltemplate=n()}(this,function(){function e(){}return e.prototype.encodeReserved=function(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e)),e}).join("")},e.prototype.encodeValue=function(e,n,t){return n="+"===e||"#"===e?this.encodeReserved(n):encodeURIComponent(n),t?encodeURIComponent(t)+"="+n:n},e.prototype.isDefined=function(e){return void 0!==e&&null!==e},e.prototype.isKeyOperator=function(e){return";"===e||"&"===e||"?"===e},e.prototype.getValues=function(e,n,t,o){var i=e[t],r=[];if(this.isDefined(i)&&""!==i)if("string"==typeof i||"number"==typeof i||"boolean"==typeof i)i=i.toString(),o&&"*"!==o&&(i=i.substring(0,parseInt(o,10))),r.push(this.encodeValue(n,i,this.isKeyOperator(n)?t:null));else if("*"===o)Array.isArray(i)?i.filter(this.isDefined).forEach(function(e){r.push(this.encodeValue(n,e,this.isKeyOperator(n)?t:null))},this):Object.keys(i).forEach(function(e){this.isDefined(i[e])&&r.push(this.encodeValue(n,i[e],e))},this);else{var s=[];Array.isArray(i)?i.filter(this.isDefined).forEach(function(e){s.push(this.encodeValue(n,e))},this):Object.keys(i).forEach(function(e){this.isDefined(i[e])&&(s.push(encodeURIComponent(e)),s.push(this.encodeValue(n,i[e].toString())))},this),this.isKeyOperator(n)?r.push(encodeURIComponent(t)+"="+s.join(",")):0!==s.length&&r.push(s.join(","))}else";"===n?r.push(encodeURIComponent(t)):""!==i||"&"!==n&&"?"!==n?""===i&&r.push(""):r.push(encodeURIComponent(t)+"=");return r},e.prototype.parse=function(e){var n=this,t=["+","#",".","/",";","?","&"];return{expand:function(o){return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,i,r){if(i){var s=null,u=[];if(-1!==t.indexOf(i.charAt(0))&&(s=i.charAt(0),i=i.substr(1)),i.split(/,/g).forEach(function(e){var t=/([^:\*]*)(?::(\d+)|(\*))?/.exec(e);u.push.apply(u,n.getValues(o,s,t[1],t[2]||t[3]))}),s&&"+"!==s){var p=",";return"?"===s?p="&":"#"!==s&&(p=s),(0!==u.length?s:"")+u.join(p)}return u.join(",")}return n.encodeReserved(r)})}}},new e});

},{}]},{},[4])(4)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
