(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ciAdapter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _toConsumableArray(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)}function _instanceof(e,r){return null!=r&&r[Symbol.hasInstance]?r[Symbol.hasInstance](e):e instanceof r}function Adapter(e){return _instanceof(this,Adapter)?void 0:new Adapter(e)}function combine(){function e(e){return function(r){var t=!0,n=!1,u=void 0;try{for(var o,i=r[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var s=o.value;a.set(s,e)}}catch(l){n=!0,u=l}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw u}}return r}}function r(r){return r.getBuilders().then(e(r))}for(var t=arguments.length,n=Array(t),u=0;t>u;u++)n[u]=arguments[u];var a=new Map;return{getInfo:function(){return Promise.all(n.map(function(e){return e.getInfo()})).then(function(e){return{name:e.map(function(e){return e.name}).join(", "),data:e}})},getBuilders:function(){return Promise.all(n.map(r)).then(function(e){var r;return(r=[]).concat.apply(r,_toConsumableArray(e))})},getBuilds:function(r){var t=a.get(r);return t.getBuilds(r).then(e(t))}}}function cache(e,r){function t(e,r){return function(){var t=r.apply(this,arguments),n=a.get(t)||e.apply(this,arguments);return a.set(t,n),n}}function n(){var e=arguments.length<=0||void 0===arguments[0]?"id":arguments[0],r={},t=0;return function(){var n=arguments.length<=0||void 0===arguments[0]?r:arguments[0];return u.has(n)||u.set(n,e+t++),u.get(n)}}var u=new WeakMap,a=new _lruCache2["default"](r);return{getInfo:t(e.getInfo,n("info")),getBuilders:t(e.getBuilders,n("builders")),getBuilds:t(e.getBuilds,n("builds"))}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Adapter=Adapter,exports.combine=combine,exports.cache=cache;var _lruCache=require("lru-cache"),_lruCache2=_interopRequireDefault(_lruCache);Adapter.prototype.getInfo=function(){return Promise.resolve({})},Adapter.prototype.getBuilders=function(){return Promise.resolve([])},Adapter.prototype.getBuilds=function(e){return Promise.resolve([])};

},{"lru-cache":8}],2:[function(require,module,exports){
"use strict";if(!window.fetch)throw new Error("Browser has no fetch. Please use a polyfill!");module.exports=window.fetch;

},{}],3:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function Buildbot(e){function t(){return(0,_fetch2["default"])(e+"/json",l).then(function(e){return e.json()}).then(function(t){return{name:t.project.title,url:e+"/json",html_url:e,builders_url:e+"/json/builders{/name}",builders:Object.keys(t.builders),data:t}})}function n(){return t().then(function(e){var t=_urlTemplate2["default"].parse(e.builders_url),n=t.expand({});return(0,_fetch2["default"])(n,l)}).then(function(e){return e.json()}).then(function(t){return Object.keys(t).map(function(n){var r=n,u=t[n];return{name:r,url:e+"/json/builders/"+r,html_url:e+"/builders/"+r,builds_url:e+"/json/builders/"+r+"/builds{/number}{?select*}",data:u}})})}function r(t){var n=[-1].concat(t.data.cachedBuilds),r=_urlTemplate2["default"].parse(t.builds_url),u=r.expand({select:n});return(0,_fetch2["default"])(u,l).then(function(e){return e.json()}).then(function(n){var r={};return Object.keys(n).map(function(e){return n[e]}).filter(function(e){var t=e.number;return r[t]?!1:r[t]=!0}).map(function(n){var r=n.times[0]&&!n.times[1];return{name:t.name,number:n.number,url:e+"/json/builders/"+t.name+"/builds/"+n.number,html_url:e+"/builders/"+t.name+"/builds/"+n.number,state:r?_constants.PENDING:BUILDBOT_STATE_LIST[n.results||0]||_constants.UNKNOWN,start:new Date(1e3*n.times[0]),end:r?null:new Date(1e3*n.times[1]),data:n}})})}var u=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=u.headers,a=Object.assign({Accept:BUILDBOT_MEDIA_TYPE,"User-Agent":_constants.USER_AGENT},s),l={headers:a};return{getInfo:t,getBuilders:n,getBuilds:r}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Buildbot;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_constants=require("./constants"),BUILDBOT_MEDIA_TYPE="application/json",BUILDBOT_STATE_LIST=[_constants.SUCCESS,_constants.WARNING,_constants.FAILURE,_constants.UNKNOWN,_constants.ERRORED,_constants.ERRORED];

},{"./constants":4,"./fetch":2,"url-template":9}],4:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var pkg=require("../package.json"),PENDING=exports.PENDING="pending",SUCCESS=exports.SUCCESS="success",WARNING=exports.WARNING="warning",FAILURE=exports.FAILURE="failure",ERRORED=exports.ERRORED="errored",ABORTED=exports.ABORTED="aborted",UNKNOWN=exports.UNKNOWN="unknown",state=exports.state={PENDING:PENDING,SUCCESS:SUCCESS,WARNING:WARNING,FAILURE:FAILURE,ERRORED:ERRORED,ABORTED:ABORTED,UNKNOWN:UNKNOWN},VERSION=exports.VERSION=pkg.version,USER_AGENT=exports.USER_AGENT="CI-Adapter/"+pkg.version+" (+"+pkg.homepage+")";

},{"../package.json":10}],5:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Travis=exports.Jenkins=exports.Buildbot=exports.Adapter=exports.state=exports.urltemplate=exports.combine=exports.cache=void 0;var _adapter=require("./adapter"),_constants=require("./constants"),_buildbot=require("./buildbot"),_buildbot2=_interopRequireDefault(_buildbot),_jenkins=require("./jenkins"),_jenkins2=_interopRequireDefault(_jenkins),_travis=require("./travis"),_travis2=_interopRequireDefault(_travis),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate);exports.cache=_adapter.cache,exports.combine=_adapter.combine,exports.urltemplate=_urlTemplate2["default"],exports.state=_constants.state,exports.Adapter=_adapter.Adapter,exports.Buildbot=_buildbot2["default"],exports.Jenkins=_jenkins2["default"],exports.Travis=_travis2["default"];

},{"./adapter":1,"./buildbot":3,"./constants":4,"./jenkins":6,"./travis":7,"url-template":9}],6:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function Jenkins(e){function n(){return(0,_fetch2["default"])(e+"/api/json",i).then(function(e){return e.json()}).then(function(n){return{name:n.nodeName,url:e+"/api/json",html_url:e,builders_url:e+"/job{/name}/api/json{?tree}",builders:n.jobs.map(function(e){return e.name}),data:n}})}function t(){return n().then(function(n){var t=e+"/api/json?tree=jobs[name,buildable,builds[number]{,10}],views[name,jobs[name]]";return(0,_fetch2["default"])(t,i)}).then(function(e){return e.json()}).then(function(n){return n.jobs.filter(function(e){return e.buildable}).map(function(t){var r=t.name;return{name:r,url:e+"/job/"+r+"/api/json",html_url:e+"/job/"+r,builds_url:e+"/job/"+r+"/{number}/api/json{?tree}",builds:t.builds.map(function(e){return e.number}),data:n}})})}function r(n){return Promise.all(n.builds.map(function(e){var t=_urlTemplate2["default"].parse(n.builds_url),r=t.expand({number:e});return(0,_fetch2["default"])(r,i).then(function(e){return e.json()})})).then(function(t){return t.map(function(t){var r=t.building;return{name:n.name,number:t.number,url:e+"/job/"+n.name+"/"+t.number+"/api/json",html_url:e+"/job/"+n.name+"/"+t.number,state:r?_constants.PENDING:JENKINS_STATE_MAP[t.result]||_constants.UNKNOWN,start:new Date(t.timestamp),end:r?null:new Date(t.timestamp+t.duration),data:t}})})}var u=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=u.headers,s=Object.assign({Accept:JENKINS_MEDIA_TYPE,"User-Agent":_constants.USER_AGENT},a),i={headers:s};return{getInfo:n,getBuilders:t,getBuilds:r}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Jenkins;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_constants=require("./constants"),JENKINS_MEDIA_TYPE="application/json",JENKINS_STATE_MAP={SUCCESS:_constants.SUCCESS,UNSTABLE:_constants.WARNING,FAILURE:_constants.FAILURE};

},{"./constants":4,"./fetch":2,"url-template":9}],7:[function(require,module,exports){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function getHtmlUrl(t){var e=TRAVIS_HTML_URL.exec(t);return e[1]+(e[3]||e[5])+(e[6]||"")}function Travis(t){function e(e){return d||(d=(0,_fetch2["default"])(t+"/auth/github",{method:"post",headers:Object.assign({},c.headers,{"Content-Type":"application/json"}),body:JSON.stringify({github_token:e})}).then(function(t){return 200!==t.status?t.text().then(function(t){return Promise.reject(new Error(t))}):t.json()}).then(function(t){var e=t.access_token;return c.headers.Authorization="token "+e,e}))}function n(){return(i?e(i):Promise.resolve(null)).then(function(){return(0,_fetch2["default"])(t+"/repos/"+o,c)}).then(function(t){return t.json()}).then(function(e){return{name:"Travis CI - "+o+" ("+t+")",url:t+"/repos/"+o,html_url:_+"/"+o,builders_url:t+"/repos/"+o+"{/name}{?ids}",builders:e.repos.map(function(t){return t.slug.split("/")[1]}),data:e}})}function r(){return n().then(function(e){var n=e.data.repos.filter(function(t){return null!==t.last_build_number});return n.map(function(e){var n=e.slug,r=n.split("/")[1],u=parseInt(e.last_build_number,10),a=[0,1,2,3,4,5,6,7,8,9,10].map(function(t){return u-t}).filter(function(t){return t>=0});return{name:r,url:t+"/repos/"+n,html_url:_+"/"+n,builds_url:t+"/repos/"+n+"/builds{?number,after_number}",builds:a,data:e}})})}function u(e){return Promise.all(e.builds.map(function(t){var n=_urlTemplate2["default"].parse(e.builds_url),r=n.expand({number:t});return(0,_fetch2["default"])(r,c).then(function(t){return t.json()})})).then(function(n){var r=[].concat.apply([],n.map(function(t){return t.builds}));return r.map(function(n){var r=TRAVIS_STATE_MAP[n.state]===_constants.PENDING;return{name:e.name,number:parseInt(n.number,10),url:t+"/repos/"+o+"/"+e.name+"/builds/"+n.id,html_url:_+"/"+o+"/"+e.name+"/builds/"+n.id,state:TRAVIS_STATE_MAP[n.state],start:new Date(n.started_at),end:r?null:new Date(n.finished_at),data:n}})})}var a=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=a.headers,i=a.github_token,o=a.account,l=Object.assign({Accept:TRAVIS_MEDIA_TYPE,"User-Agent":_constants.USER_AGENT},s),c={headers:l},_=getHtmlUrl(t),d=void 0;return{getInfo:n,getBuilders:r,getBuilds:u}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=Travis;var _fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),_urlTemplate=require("url-template"),_urlTemplate2=_interopRequireDefault(_urlTemplate),_constants=require("./constants"),TRAVIS_API_VERSION=2,TRAVIS_MEDIA_TYPE="application/vnd.travis-ci."+TRAVIS_API_VERSION+"+json",TRAVIS_HTML_URL=/^(https?:\/\/)(api\.(travis-ci\.(org|com))|([^\/]+)\/api)(\/.+)?$/,TRAVIS_STATE_MAP={received:_constants.PENDING,created:_constants.PENDING,queued:_constants.PENDING,started:_constants.PENDING,passed:_constants.SUCCESS,failed:_constants.FAILURE,errored:_constants.ERRORED,canceled:_constants.ABORTED};

},{"./constants":4,"./fetch":2,"url-template":9}],8:[function(require,module,exports){
!function(){function t(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function e(){return 1}function i(t){return this instanceof i?("number"==typeof t&&(t={max:t}),t||(t={}),this._max=t.max,(!this._max||"number"!=typeof this._max||this._max<=0)&&(this._max=1/0),this._lengthCalculator=t.length||e,"function"!=typeof this._lengthCalculator&&(this._lengthCalculator=e),this._allowStale=t.stale||!1,this._maxAge=t.maxAge||null,this._dispose=t.dispose,void this.reset()):new i(t)}function h(t,e,i){var h=t._cache[e];return h&&(s(t,h)?(u(t,h),t._allowStale||(h=void 0)):i&&n(t,h),h&&(h=h.value)),h}function s(t,e){if(!e||!e.maxAge&&!t._maxAge)return!1;var i=!1,h=Date.now()-e.now;return i=e.maxAge?h>e.maxAge:t._maxAge&&h>t._maxAge}function n(t,e){o(t,e),e.lu=t._mru++,t._lruList[e.lu]=e}function r(t){for(;t._lru<t._mru&&t._length>t._max;)u(t,t._lruList[t._lru])}function o(t,e){for(delete t._lruList[e.lu];t._lru<t._mru&&!t._lruList[t._lru];)t._lru++}function u(t,e){e&&(t._dispose&&t._dispose(e.key,e.value),t._length-=e.length,t._itemCount--,delete t._cache[e.key],o(t,e))}function a(t,e,i,h,s,n){this.key=t,this.value=e,this.lu=i,this.length=h,this.now=s,n&&(this.maxAge=n)}"object"==typeof module&&module.exports?module.exports=i:this.LRUCache=i,Object.defineProperty(i.prototype,"max",{set:function(t){(!t||"number"!=typeof t||0>=t)&&(t=1/0),this._max=t,this._length>this._max&&r(this)},get:function(){return this._max},enumerable:!0}),Object.defineProperty(i.prototype,"lengthCalculator",{set:function(t){if("function"!=typeof t){this._lengthCalculator=e,this._length=this._itemCount;for(var i in this._cache)this._cache[i].length=1}else{this._lengthCalculator=t,this._length=0;for(var i in this._cache)this._cache[i].length=this._lengthCalculator(this._cache[i].value),this._length+=this._cache[i].length}this._length>this._max&&r(this)},get:function(){return this._lengthCalculator},enumerable:!0}),Object.defineProperty(i.prototype,"length",{get:function(){return this._length},enumerable:!0}),Object.defineProperty(i.prototype,"itemCount",{get:function(){return this._itemCount},enumerable:!0}),i.prototype.forEach=function(t,e){e=e||this;for(var i=0,h=this._itemCount,n=this._mru-1;n>=0&&h>i;n--)if(this._lruList[n]){i++;var r=this._lruList[n];s(this,r)&&(u(this,r),this._allowStale||(r=void 0)),r&&t.call(e,r.value,r.key,this)}},i.prototype.keys=function(){for(var t=new Array(this._itemCount),e=0,i=this._mru-1;i>=0&&e<this._itemCount;i--)if(this._lruList[i]){var h=this._lruList[i];t[e++]=h.key}return t},i.prototype.values=function(){for(var t=new Array(this._itemCount),e=0,i=this._mru-1;i>=0&&e<this._itemCount;i--)if(this._lruList[i]){var h=this._lruList[i];t[e++]=h.value}return t},i.prototype.reset=function(){if(this._dispose&&this._cache)for(var t in this._cache)this._dispose(t,this._cache[t].value);this._cache=Object.create(null),this._lruList=Object.create(null),this._mru=0,this._lru=0,this._length=0,this._itemCount=0},i.prototype.dump=function(){for(var t=[],e=0,i=this._mru-1;i>=0&&e<this._itemCount;i--)if(this._lruList[i]){var h=this._lruList[i];s(this,h)||(++e,t.push({k:h.key,v:h.value,e:h.now+(h.maxAge||0)}))}return t},i.prototype.dumpLru=function(){return this._lruList},i.prototype.set=function(e,i,h){h=h||this._maxAge;var s=h?Date.now():0,n=this._lengthCalculator(i);if(t(this._cache,e))return n>this._max?(u(this,this._cache[e]),!1):(this._dispose&&this._dispose(e,this._cache[e].value),this._cache[e].now=s,this._cache[e].maxAge=h,this._cache[e].value=i,this._length+=n-this._cache[e].length,this._cache[e].length=n,this.get(e),this._length>this._max&&r(this),!0);var o=new a(e,i,this._mru++,n,s,h);return o.length>this._max?(this._dispose&&this._dispose(e,i),!1):(this._length+=o.length,this._lruList[o.lu]=this._cache[e]=o,this._itemCount++,this._length>this._max&&r(this),!0)},i.prototype.has=function(e){if(!t(this._cache,e))return!1;var i=this._cache[e];return s(this,i)?!1:!0},i.prototype.get=function(t){return h(this,t,!0)},i.prototype.peek=function(t){return h(this,t,!1)},i.prototype.pop=function(){var t=this._lruList[this._lru];return u(this,t),t||null},i.prototype.del=function(t){u(this,this._cache[t])},i.prototype.load=function(t){this.reset();for(var e=Date.now(),i=t.length-1;i>=0;i--){var h=t[i],s=h.e||0;if(0===s)this.set(h.k,h.v);else{var n=s-e;n>0&&this.set(h.k,h.v,n)}}}}();

},{}],9:[function(require,module,exports){
!function(e,n){"object"==typeof exports?module.exports=n():"function"==typeof define&&define.amd?define([],n):e.urltemplate=n()}(this,function(){function e(){}return e.prototype.encodeReserved=function(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e)),e}).join("")},e.prototype.encodeValue=function(e,n,t){return n="+"===e||"#"===e?this.encodeReserved(n):encodeURIComponent(n),t?encodeURIComponent(t)+"="+n:n},e.prototype.isDefined=function(e){return void 0!==e&&null!==e},e.prototype.isKeyOperator=function(e){return";"===e||"&"===e||"?"===e},e.prototype.getValues=function(e,n,t,o){var i=e[t],r=[];if(this.isDefined(i)&&""!==i)if("string"==typeof i||"number"==typeof i||"boolean"==typeof i)i=i.toString(),o&&"*"!==o&&(i=i.substring(0,parseInt(o,10))),r.push(this.encodeValue(n,i,this.isKeyOperator(n)?t:null));else if("*"===o)Array.isArray(i)?i.filter(this.isDefined).forEach(function(e){r.push(this.encodeValue(n,e,this.isKeyOperator(n)?t:null))},this):Object.keys(i).forEach(function(e){this.isDefined(i[e])&&r.push(this.encodeValue(n,i[e],e))},this);else{var s=[];Array.isArray(i)?i.filter(this.isDefined).forEach(function(e){s.push(this.encodeValue(n,e))},this):Object.keys(i).forEach(function(e){this.isDefined(i[e])&&(s.push(encodeURIComponent(e)),s.push(this.encodeValue(n,i[e].toString())))},this),this.isKeyOperator(n)?r.push(encodeURIComponent(t)+"="+s.join(",")):0!==s.length&&r.push(s.join(","))}else";"===n?r.push(encodeURIComponent(t)):""!==i||"&"!==n&&"?"!==n?""===i&&r.push(""):r.push(encodeURIComponent(t)+"=");return r},e.prototype.parse=function(e){var n=this,t=["+","#",".","/",";","?","&"];return{expand:function(o){return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,i,r){if(i){var s=null,u=[];if(-1!==t.indexOf(i.charAt(0))&&(s=i.charAt(0),i=i.substr(1)),i.split(/,/g).forEach(function(e){var t=/([^:\*]*)(?::(\d+)|(\*))?/.exec(e);u.push.apply(u,n.getValues(o,s,t[1],t[2]||t[3]))}),s&&"+"!==s){var p=",";return"?"===s?p="&":"#"!==s&&(p=s),(0!==u.length?s:"")+u.join(p)}return u.join(",")}return n.encodeReserved(r)})}}},new e});

},{}],10:[function(require,module,exports){
module.exports={
  "name": "ci-adapter",
  "version": "0.1.1",
  "description": "Uniform access to a bunch of continuous integration providers",
  "main": "./lib",
  "homepage": "https://github.com/jpommerening/ci-adapter",
  "browser": {
    "./lib/fetch.js": "./lib/browser-fetch.js"
  },
  "scripts": {
    "prepublish": "babel -d lib src && browserify -o browser.js -t [ uglifyify -c ] -g uglifyify --debug -s ci-adapter ./lib/index.js",
    "test": "mocha --compilers js:babel-core/register"
  },
  "keywords": [
    "ci",
    "buildbot",
    "travis",
    "jenkis",
    "status"
  ],
  "author": "Jonas Pommerening",
  "license": "MIT",
  "dependencies": {
    "lru": "^1.0.0",
    "lru-cache": "^2.7.0",
    "node-fetch": "^1.3.3",
    "url-template": "^2.0.6"
  },
  "devDependencies": {
    "babel-cli": "^6.1.1",
    "babel-core": "^6.0.20",
    "babel-preset-es2015": "^6.0.15",
    "browserify": "^12.0.1",
    "expect.js": "^0.3.1",
    "mocha": "^2.3.3",
    "uglifyify": "^3.0.1"
  },
  "babel": {
    "presets": [
      "es2015"
    ],
    "sourceMaps": "inline"
  }
}

},{}]},{},[5])(5)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
