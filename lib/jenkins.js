'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Jenkins;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _util = require('./util');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JENKINS_MEDIA_TYPE = 'application/json';
var JENKINS_STATE_MAP = {
  SUCCESS: _constants.SUCCESS,
  UNSTABLE: _constants.WARNING,
  FAILURE: _constants.FAILURE
};

function Jenkins(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;
  var view = _ref.view;

  var headers = Object.assign({
    'Accept': JENKINS_MEDIA_TYPE,
    'User-Agent': _constants.USER_AGENT
  }, h);
  var options = {
    headers: headers
  };

  function getInfo() {
    return (0, _fetch2.default)(endpoint + '/api/json', options).then(_util.handleResponse).then(makeInfo);
  }

  function getBuilder(name) {
    return getInfo().then(function (info) {
      var template = _urlTemplate2.default.parse(info.builders_url);
      var url = template.expand({ name: name });

      return (0, _fetch2.default)(url, options);
    }).then(_util.handleResponse).then(makeBuilder);
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var url = endpoint + '/api/json?tree=jobs[name,buildable,builds[number]{,10}],views[name,jobs[name]]';

      return (0, _fetch2.default)(url, options);
    }).then(_util.handleResponse).then(function (data) {
      var filter = view ? function (v) {
        return v.name === view;
      } : function () {
        return true;
      };
      var jobs = data.views.filter(filter)[0].jobs.map(function (job) {
        return job.name;
      });
      return data.jobs.filter(function (job) {
        return jobs.indexOf(job.name) >= 0 && job.buildable;
      }).map(makeBuilder);
    });
  }

  function getBuild(name, number) {
    return getBuilder(name).then(function (builder) {
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ number: number });

      return (0, _fetch2.default)(url, options).then(_util.handleResponse).then(function (data) {
        return makeBuild(builder.data, data);
      });
    });
  }

  function getBuilds(builder) {
    return Promise.all(builder.builds.map(function (number) {
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ number: number });

      return (0, _fetch2.default)(url, options).then(_util.handleResponse).then(function (data) {
        return makeBuild(builder.data, data);
      });
    }));
  }

  function makeInfo(root) {
    var name = root.nodeName;
    var builders = root.jobs.map(function (job) {
      return job.name;
    });
    var data = root;

    return {
      name: name,
      url: endpoint + '/api/json',
      html_url: endpoint,
      builders_url: endpoint + '/job{/name}/api/json{?tree}',
      builders: builders,
      data: data
    };
  }

  function makeBuilder(job) {
    var name = job.name;
    var builds = job.builds.map(function (build) {
      return build.number;
    });
    var data = job;

    return {
      data: data,
      name: name,
      url: endpoint + '/job/' + name + '/api/json',
      html_url: endpoint + '/job/' + name,
      builds_url: endpoint + '/job/' + name + '/{number}/api/json{?tree}',
      builds: builds
    };
  }

  function makeBuild(job, build) {
    var name = job.name;
    var number = build.number;
    var building = build.building;
    var data = build;

    return {
      name: name,
      number: number,
      url: endpoint + '/job/' + name + '/' + number + '/api/json',
      html_url: endpoint + '/job/' + name + '/' + number,
      state: building ? _constants.PENDING : JENKINS_STATE_MAP[build.result] || _constants.UNKNOWN,
      start: new Date(build.timestamp),
      end: building ? null : new Date(build.timestamp + build.duration),
      data: data
    };
  }

  return {
    getInfo: getInfo,
    getBuilder: getBuilder,
    getBuilders: getBuilders,
    getBuild: getBuild,
    getBuilds: getBuilds
  };
}
//# sourceMappingURL=data:application/json;base64,