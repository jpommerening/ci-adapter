'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Jenkins;

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _util = require('util');

var _adapter = require('./adapter');

var _util2 = require('./util');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

var JENKINS_MEDIA_TYPE = 'application/json';
var JENKINS_STATE_MAP = {
  SUCCESS: _constants.SUCCESS,
  UNSTABLE: _constants.WARNING,
  FAILURE: _constants.FAILURE
};

(0, _util.inherits)(Jenkins, _adapter.Adapter);

function Jenkins(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;
  var view = _ref.view;

  if (!_instanceof(this, Jenkins)) {
    return new Jenkins(endpoint, { headers: h, view: view });
  }

  var headers = Object.assign({
    'Accept': JENKINS_MEDIA_TYPE,
    'User-Agent': _constants.USER_AGENT
  }, h);
  var options = {
    headers: headers
  };

  _adapter.Adapter.call(this);

  this.getInfo = getInfo;
  this.getBuilder = getBuilder;
  this.getBuild = getBuild;
  this.getBuilders = getBuilders;

  function getInfo() {
    return (0, _fetch2.default)(endpoint + '/api/json', options).then(_util2.handleResponse).then(makeInfo);
  }

  function getBuilder(info, name) {
    var template = _urlTemplate2.default.parse(info.builders_url);
    var url = template.expand({ name: name });

    return (0, _fetch2.default)(url, options).then(_util2.handleResponse).then(makeBuilder);
  }

  function getBuild(builder, number) {
    var template = _urlTemplate2.default.parse(builder.builds_url);
    var url = template.expand({ number: number });

    return (0, _fetch2.default)(url, options).then(_util2.handleResponse).then(function (data) {
      return makeBuild(builder.data, data);
    });
  }

  function getBuilders(info) {
    var url = endpoint + '/api/json?tree=jobs[name,buildable,builds[number]{,10}],views[name,jobs[name]]';

    return (0, _fetch2.default)(url, options).then(_util2.handleResponse).then(function (data) {
      var filter = view ? function (v) {
        return v.name === view;
      } : function () {
        return true;
      };
      var jobs = data.views.filter(filter)[0].jobs.map(function (job) {
        return job.name;
      });
      return data.jobs.filter(function (job) {
        return jobs.indexOf(job.name) >= 0 && job.buildable;
      }).map(makeBuilder);
    });
  }

  function makeInfo(root) {
    var name = root.nodeName;
    var builders = root.jobs.map(function (job) {
      return job.name;
    });
    var data = root;

    return {
      name: name,
      url: endpoint + '/api/json',
      html_url: endpoint,
      builders_url: endpoint + '/job{/name}/api/json{?tree}',
      builders: builders,
      data: data
    };
  }

  function makeBuilder(job) {
    var name = job.name;
    var builds = job.builds.map(function (build) {
      return build.number;
    });
    var data = job;

    return {
      data: data,
      name: name,
      url: endpoint + '/job/' + name + '/api/json',
      html_url: endpoint + '/job/' + name,
      builds_url: endpoint + '/job/' + name + '/{number}/api/json{?tree}',
      builds: builds
    };
  }

  function makeBuild(job, build) {
    var name = job.name;
    var number = build.number;
    var building = build.building;
    var data = build;

    return {
      name: name,
      number: number,
      url: endpoint + '/job/' + name + '/' + number + '/api/json',
      html_url: endpoint + '/job/' + name + '/' + number,
      state: building ? _constants.PENDING : JENKINS_STATE_MAP[build.result] || _constants.UNKNOWN,
      start: new Date(build.timestamp),
      end: building ? null : new Date(build.timestamp + build.duration),
      data: data
    };
  }
}
//# sourceMappingURL=data:application/json;base64,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SSxFQUFKLElBQUk7S0FDTCxDQUFDO0dBQ0g7Q0FDRiIsImZpbGUiOiJqZW5raW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVybHRlbXBsYXRlIGZyb20gJ3VybC10ZW1wbGF0ZSc7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnLi9mZXRjaCc7XG5pbXBvcnQgeyBpbmhlcml0cyB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHsgQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgeyBoYW5kbGVSZXNwb25zZSB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBQRU5ESU5HLCBTVUNDRVNTLCBGQUlMVVJFLCBXQVJOSU5HLCBVTktOT1dOLCBVU0VSX0FHRU5UIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBKRU5LSU5TX01FRElBX1RZUEUgPSAnYXBwbGljYXRpb24vanNvbic7XG5jb25zdCBKRU5LSU5TX1NUQVRFX01BUCA9IHtcbiAgU1VDQ0VTUzogU1VDQ0VTUyxcbiAgVU5TVEFCTEU6IFdBUk5JTkcsXG4gIEZBSUxVUkU6IEZBSUxVUkVcbn07XG5cbmluaGVyaXRzKEplbmtpbnMsIEFkYXB0ZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBKZW5raW5zKGVuZHBvaW50LCB7IGhlYWRlcnM6IGgsIHZpZXcgfSA9IHt9KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBKZW5raW5zKSkge1xuICAgIHJldHVybiBuZXcgSmVua2lucyhlbmRwb2ludCwgeyBoZWFkZXJzOiBoLCB2aWV3IH0pO1xuICB9XG5cbiAgY29uc3QgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICdBY2NlcHQnOiBKRU5LSU5TX01FRElBX1RZUEUsXG4gICAgJ1VzZXItQWdlbnQnOiBVU0VSX0FHRU5UXG4gIH0sIGgpO1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGhlYWRlcnNcbiAgfTtcblxuICBBZGFwdGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5nZXRJbmZvID0gZ2V0SW5mbztcbiAgdGhpcy5nZXRCdWlsZGVyID0gZ2V0QnVpbGRlcjtcbiAgdGhpcy5nZXRCdWlsZCA9IGdldEJ1aWxkO1xuICB0aGlzLmdldEJ1aWxkZXJzID0gZ2V0QnVpbGRlcnM7XG5cbiAgZnVuY3Rpb24gZ2V0SW5mbygpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7ZW5kcG9pbnR9L2FwaS9qc29uYCwgb3B0aW9ucylcbiAgICAgIC50aGVuKGhhbmRsZVJlc3BvbnNlKVxuICAgICAgLnRoZW4obWFrZUluZm8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnVpbGRlcihpbmZvLCBuYW1lKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB1cmx0ZW1wbGF0ZS5wYXJzZShpbmZvLmJ1aWxkZXJzX3VybCk7XG4gICAgY29uc3QgdXJsID0gdGVtcGxhdGUuZXhwYW5kKHsgbmFtZSB9KTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpXG4gICAgICAudGhlbihoYW5kbGVSZXNwb25zZSlcbiAgICAgIC50aGVuKG1ha2VCdWlsZGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ1aWxkKGJ1aWxkZXIsIG51bWJlcikge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdXJsdGVtcGxhdGUucGFyc2UoYnVpbGRlci5idWlsZHNfdXJsKTtcbiAgICBjb25zdCB1cmwgPSB0ZW1wbGF0ZS5leHBhbmQoeyBudW1iZXIgfSk7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKVxuICAgICAgLnRoZW4oaGFuZGxlUmVzcG9uc2UpXG4gICAgICAudGhlbihkYXRhID0+IG1ha2VCdWlsZChidWlsZGVyLmRhdGEsIGRhdGEpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ1aWxkZXJzKGluZm8pIHtcbiAgICBjb25zdCB1cmwgPSBgJHtlbmRwb2ludH0vYXBpL2pzb24/dHJlZT1qb2JzW25hbWUsYnVpbGRhYmxlLGJ1aWxkc1tudW1iZXJdeywxMH1dLHZpZXdzW25hbWUsam9ic1tuYW1lXV1gO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucylcbiAgICAgIC50aGVuKGhhbmRsZVJlc3BvbnNlKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gdmlldyA/ICh2ID0+IHYubmFtZSA9PT0gdmlldykgOiAoKCkgPT4gdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGpvYnMgPSBkYXRhLnZpZXdzLmZpbHRlcihmaWx0ZXIpWyAwIF0uam9icy5tYXAoam9iID0+IGpvYi5uYW1lKTtcbiAgICAgICAgcmV0dXJuIGRhdGEuam9icy5maWx0ZXIoZnVuY3Rpb24gKGpvYikge1xuICAgICAgICAgIHJldHVybiBqb2JzLmluZGV4T2Yoam9iLm5hbWUpID49IDAgJiYgam9iLmJ1aWxkYWJsZTtcbiAgICAgICAgfSkubWFwKG1ha2VCdWlsZGVyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUluZm8ocm9vdCkge1xuICAgIGNvbnN0IG5hbWUgPSByb290Lm5vZGVOYW1lO1xuICAgIGNvbnN0IGJ1aWxkZXJzID0gcm9vdC5qb2JzLm1hcChqb2IgPT4gam9iLm5hbWUpO1xuICAgIGNvbnN0IGRhdGEgPSByb290O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICB1cmw6IGAke2VuZHBvaW50fS9hcGkvanNvbmAsXG4gICAgICBodG1sX3VybDogZW5kcG9pbnQsXG4gICAgICBidWlsZGVyc191cmw6IGAke2VuZHBvaW50fS9qb2J7L25hbWV9L2FwaS9qc29uez90cmVlfWAsXG4gICAgICBidWlsZGVycyxcbiAgICAgIGRhdGFcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUJ1aWxkZXIoam9iKSB7XG4gICAgY29uc3QgbmFtZSA9IGpvYi5uYW1lO1xuICAgIGNvbnN0IGJ1aWxkcyA9IGpvYi5idWlsZHMubWFwKGJ1aWxkID0+IGJ1aWxkLm51bWJlcik7XG4gICAgY29uc3QgZGF0YSA9IGpvYjtcblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhLFxuICAgICAgbmFtZSxcbiAgICAgIHVybDogYCR7ZW5kcG9pbnR9L2pvYi8ke25hbWV9L2FwaS9qc29uYCxcbiAgICAgIGh0bWxfdXJsOiBgJHtlbmRwb2ludH0vam9iLyR7bmFtZX1gLFxuICAgICAgYnVpbGRzX3VybDogYCR7ZW5kcG9pbnR9L2pvYi8ke25hbWV9L3tudW1iZXJ9L2FwaS9qc29uez90cmVlfWAsXG4gICAgICBidWlsZHNcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUJ1aWxkKGpvYiwgYnVpbGQpIHtcbiAgICBjb25zdCBuYW1lID0gam9iLm5hbWU7XG4gICAgY29uc3QgbnVtYmVyID0gYnVpbGQubnVtYmVyO1xuICAgIGNvbnN0IGJ1aWxkaW5nID0gYnVpbGQuYnVpbGRpbmc7XG4gICAgY29uc3QgZGF0YSA9IGJ1aWxkO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICBudW1iZXIsXG4gICAgICB1cmw6IGAke2VuZHBvaW50fS9qb2IvJHtuYW1lfS8ke251bWJlcn0vYXBpL2pzb25gLFxuICAgICAgaHRtbF91cmw6IGAke2VuZHBvaW50fS9qb2IvJHtuYW1lfS8ke251bWJlcn1gLFxuICAgICAgc3RhdGU6IGJ1aWxkaW5nID8gUEVORElORyA6IChKRU5LSU5TX1NUQVRFX01BUFsgYnVpbGQucmVzdWx0IF0gfHwgVU5LTk9XTiksXG4gICAgICBzdGFydDogbmV3IERhdGUoYnVpbGQudGltZXN0YW1wKSxcbiAgICAgIGVuZDogYnVpbGRpbmcgPyBudWxsIDogbmV3IERhdGUoYnVpbGQudGltZXN0YW1wICsgYnVpbGQuZHVyYXRpb24pLFxuICAgICAgZGF0YVxuICAgIH07XG4gIH1cbn1cbiJdfQ==