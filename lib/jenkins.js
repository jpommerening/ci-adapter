'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Jenkins;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JENKINS_MEDIA_TYPE = 'application/json';
var JENKINS_STATE_MAP = {
  SUCCESS: _constants.SUCCESS,
  UNSTABLE: _constants.WARNING,
  FAILURE: _constants.FAILURE
};

function Jenkins(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;

  var headers = Object.assign({
    'Accept': JENKINS_MEDIA_TYPE,
    'User-Agent': _constants.USER_AGENT
  }, h);
  var options = {
    headers: headers
  };

  function getInfo() {
    return (0, _fetch2.default)(endpoint + '/api/json', options).then(function (response) {
      return response.json();
    }).then(function (root) {
      return {
        name: root.nodeName,
        url: endpoint + '/api/json',
        html_url: endpoint,
        builders_url: endpoint + '/job{/name}/api/json{?tree}',
        builders: root.jobs.map(function (job) {
          return job.name;
        }),
        data: root
      };
    });
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var url = endpoint + '/api/json?tree=jobs[name,buildable,builds[number]{,10}],views[name,jobs[name]]';

      return (0, _fetch2.default)(url, options);
    }).then(function (response) {
      return response.json();
    }).then(function (data) {
      return data.jobs.filter(function (job) {
        return job.buildable;
      }).map(function (job) {
        var name = job.name;

        return {
          name: name,
          url: endpoint + '/job/' + name + '/api/json',
          html_url: endpoint + '/job/' + name,
          builds_url: endpoint + '/job/' + name + '/{number}/api/json{?tree}',
          builds: job.builds.map(function (build) {
            return build.number;
          }),
          data: data
        };
      });
    });
  }

  function getBuilds(builder) {
    return Promise.all(builder.builds.map(function (number) {
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ number: number });

      return (0, _fetch2.default)(url, options).then(function (response) {
        return response.json();
      });
    })).then(function (builds) {
      return builds.map(function (build) {
        var building = build.building;

        return {
          name: builder.name,
          number: build.number,
          url: endpoint + '/job/' + builder.name + '/' + build.number + '/api/json',
          html_url: endpoint + '/job/' + builder.name + '/' + build.number,
          state: building ? _constants.PENDING : JENKINS_STATE_MAP[build.result] || _constants.UNKNOWN,
          start: new Date(build.timestamp),
          end: building ? null : new Date(build.timestamp + build.duration),
          data: build
        };
      });
    });
  }

  return {
    getInfo: getInfo,
    getBuilders: getBuilders,
    getBuilds: getBuilds
  };
}
//# sourceMappingURL=data:application/json;base64,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QVc7QUFDWCxhQUFTLEVBQVQsU0FBUztHQUNWLENBQUM7Q0FDSCIsImZpbGUiOiJqZW5raW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZldGNoIGZyb20gJy4vZmV0Y2gnO1xuaW1wb3J0IHVybHRlbXBsYXRlIGZyb20gJ3VybC10ZW1wbGF0ZSc7XG5pbXBvcnQgeyBQRU5ESU5HLCBTVUNDRVNTLCBGQUlMVVJFLCBXQVJOSU5HLCBVTktOT1dOLCBVU0VSX0FHRU5UIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBKRU5LSU5TX01FRElBX1RZUEUgPSAnYXBwbGljYXRpb24vanNvbic7XG5jb25zdCBKRU5LSU5TX1NUQVRFX01BUCA9IHtcbiAgU1VDQ0VTUzogU1VDQ0VTUyxcbiAgVU5TVEFCTEU6IFdBUk5JTkcsXG4gIEZBSUxVUkU6IEZBSUxVUkVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEplbmtpbnMoZW5kcG9pbnQsIHsgaGVhZGVyczogaCB9ID0ge30pIHtcbiAgY29uc3QgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICdBY2NlcHQnOiBKRU5LSU5TX01FRElBX1RZUEUsXG4gICAgJ1VzZXItQWdlbnQnOiBVU0VSX0FHRU5UXG4gIH0sIGgpO1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGhlYWRlcnNcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRJbmZvKCkge1xuICAgIHJldHVybiBmZXRjaChgJHtlbmRwb2ludH0vYXBpL2pzb25gLCBvcHRpb25zKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyb290KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogcm9vdC5ub2RlTmFtZSxcbiAgICAgICAgICB1cmw6IGAke2VuZHBvaW50fS9hcGkvanNvbmAsXG4gICAgICAgICAgaHRtbF91cmw6IGVuZHBvaW50LFxuICAgICAgICAgIGJ1aWxkZXJzX3VybDogYCR7ZW5kcG9pbnR9L2pvYnsvbmFtZX0vYXBpL2pzb257P3RyZWV9YCxcbiAgICAgICAgICBidWlsZGVyczogcm9vdC5qb2JzLm1hcChqb2IgPT4gam9iLm5hbWUpLFxuICAgICAgICAgIGRhdGE6IHJvb3RcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnVpbGRlcnMoKSB7XG4gICAgcmV0dXJuIGdldEluZm8oKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7ZW5kcG9pbnR9L2FwaS9qc29uP3RyZWU9am9ic1tuYW1lLGJ1aWxkYWJsZSxidWlsZHNbbnVtYmVyXXssMTB9XSx2aWV3c1tuYW1lLGpvYnNbbmFtZV1dYDtcblxuICAgICAgICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLmpvYnMuZmlsdGVyKGZ1bmN0aW9uIChqb2IpIHtcbiAgICAgICAgICByZXR1cm4gam9iLmJ1aWxkYWJsZTtcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChqb2IpIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gam9iLm5hbWU7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHVybDogYCR7ZW5kcG9pbnR9L2pvYi8ke25hbWV9L2FwaS9qc29uYCxcbiAgICAgICAgICAgIGh0bWxfdXJsOiBgJHtlbmRwb2ludH0vam9iLyR7bmFtZX1gLFxuICAgICAgICAgICAgYnVpbGRzX3VybDogYCR7ZW5kcG9pbnR9L2pvYi8ke25hbWV9L3tudW1iZXJ9L2FwaS9qc29uez90cmVlfWAsXG4gICAgICAgICAgICBidWlsZHM6IGpvYi5idWlsZHMubWFwKGJ1aWxkID0+IGJ1aWxkLm51bWJlciksXG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ1aWxkcyhidWlsZGVyKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGJ1aWxkZXIuYnVpbGRzLm1hcChmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHVybHRlbXBsYXRlLnBhcnNlKCBidWlsZGVyLmJ1aWxkc191cmwgKTtcbiAgICAgIGNvbnN0IHVybCA9IHRlbXBsYXRlLmV4cGFuZCh7IG51bWJlciB9KTtcblxuICAgICAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0pO1xuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChidWlsZHMpIHtcbiAgICAgIHJldHVybiBidWlsZHMubWFwKGZ1bmN0aW9uIChidWlsZCkge1xuICAgICAgICBjb25zdCBidWlsZGluZyA9IGJ1aWxkLmJ1aWxkaW5nO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogYnVpbGRlci5uYW1lLFxuICAgICAgICAgIG51bWJlcjogYnVpbGQubnVtYmVyLFxuICAgICAgICAgIHVybDogYCR7ZW5kcG9pbnR9L2pvYi8ke2J1aWxkZXIubmFtZX0vJHtidWlsZC5udW1iZXJ9L2FwaS9qc29uYCxcbiAgICAgICAgICBodG1sX3VybDogYCR7ZW5kcG9pbnR9L2pvYi8ke2J1aWxkZXIubmFtZX0vJHtidWlsZC5udW1iZXJ9YCxcbiAgICAgICAgICBzdGF0ZTogYnVpbGRpbmcgPyBQRU5ESU5HIDogKCBKRU5LSU5TX1NUQVRFX01BUFsgYnVpbGQucmVzdWx0IF0gfHwgVU5LTk9XTiApLFxuICAgICAgICAgIHN0YXJ0OiBuZXcgRGF0ZShidWlsZC50aW1lc3RhbXApLFxuICAgICAgICAgIGVuZDogYnVpbGRpbmcgPyBudWxsIDogbmV3IERhdGUoYnVpbGQudGltZXN0YW1wICsgYnVpbGQuZHVyYXRpb24pLFxuICAgICAgICAgIGRhdGE6IGJ1aWxkXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0SW5mbyxcbiAgICBnZXRCdWlsZGVycyxcbiAgICBnZXRCdWlsZHNcbiAgfTtcbn1cbiJdfQ==