'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Buildbot;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _util = require('./util');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BUILDBOT_MEDIA_TYPE = 'application/json';
var BUILDBOT_STATE_LIST = [_constants.SUCCESS, _constants.WARNING, _constants.FAILURE, _constants.UNKNOWN, _constants.ERRORED, _constants.ERRORED];

function Buildbot(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;

  var headers = Object.assign({
    'Accept': BUILDBOT_MEDIA_TYPE,
    'User-Agent': _constants.USER_AGENT
  }, h);
  var options = {
    headers: headers
  };

  function getInfo() {
    return (0, _fetch2.default)(endpoint + '/json', options).then(_util.handleResponse).then(makeInfo);
  }

  function getBuilder(name) {
    return getInfo().then(function (info) {
      var template = _urlTemplate2.default.parse(info.builders_url);
      var url = template.expand({ name: name });

      return (0, _fetch2.default)(url, options);
    }).then(_util.handleResponse).then(function (data) {
      return makeBuilder(name, data);
    });
  }

  function getBuild(name, number) {
    return getBuilder(name).then(function (builder) {
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ number: number });

      return (0, _fetch2.default)(url, options);
    }).then(_util.handleResponse).then(makeBuild);
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var select = info.builders;
      var template = _urlTemplate2.default.parse(info.builders_url);
      var url = template.expand({ select: select });

      return (0, _fetch2.default)(url, options);
    }).then(_util.handleResponse).then(function (data) {
      return Object.keys(data).map(function (key) {
        return makeBuilder(key, data[key]);
      });
    });
  }

  function getBuilds(name) {
    return getBuilder(name).then(function (builder) {
      var select = builder.builds;
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ select: select });

      return (0, _fetch2.default)(url, options);
    }).then(_util.handleResponse).then(uniqueBuilds).then(function (builds) {
      return builds.map(makeBuild);
    });
  }

  function uniqueBuilds(builds) {
    var numbers = {};

    return Object.keys(builds).map(function (key) {
      return builds[key];
    }).filter(function (_ref2) {
      var number = _ref2.number;

      if (numbers[number]) return false;
      return numbers[number] = true;
    });
  }

  function makeInfo(root) {
    var name = root.project.title;
    var builders = Object.keys(root.builders);
    var data = root;

    return {
      name: name,
      url: endpoint + '/json',
      html_url: endpoint,
      builders_url: endpoint + '/json/builders{/name}{?select*}',
      builders: builders,
      data: data
    };
  }

  function makeBuilder(name, builder) {
    var builds = [-1].concat(builder.cachedBuilds);
    var data = builder;

    return {
      name: name,
      url: endpoint + '/json/builders/' + name,
      html_url: endpoint + '/builders/' + name,
      builds_url: endpoint + '/json/builders/' + name + '/builds{/number}{?select*}',
      builds: builds,
      data: data
    };
  }

  function makeBuild(build) {
    var name = build.builderName;
    var number = build.number;
    var building = build.times[0] && !build.times[1];
    var data = build;

    return {
      name: name,
      number: number,
      url: endpoint + '/json/builders/' + name + '/builds/' + number,
      html_url: endpoint + '/builders/' + name + '/builds/' + number,
      state: building ? _constants.PENDING : BUILDBOT_STATE_LIST[build.results || 0] || _constants.UNKNOWN,
      start: new Date(build.times[0] * 1000),
      end: building ? null : new Date(build.times[1] * 1000),
      data: data
    };
  }

  return {
    getInfo: getInfo,
    getBuilder: getBuilder,
    getBuilders: getBuilders,
    getBuild: getBuild,
    getBuilds: getBuilds
  };
}
//# sourceMappingURL=data:application/json;base64,