'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Buildbot;

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _util = require('util');

var _adapter = require('./adapter');

var _util2 = require('./util');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

var BUILDBOT_MEDIA_TYPE = 'application/json';
var BUILDBOT_STATE_LIST = [_constants.SUCCESS, _constants.WARNING, _constants.FAILURE, _constants.UNKNOWN, _constants.ERRORED, _constants.ERRORED];

function uniqueBuilds(builds) {
  var numbers = {};

  return Object.keys(builds).map(function (key) {
    return builds[key];
  }).filter(function (_ref) {
    var number = _ref.number;

    if (numbers[number]) return false;
    return numbers[number] = true;
  });
}

(0, _util.inherits)(Buildbot, _adapter.Adapter);

function Buildbot(endpoint) {
  var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref2.headers;

  if (!_instanceof(this, Buildbot)) {
    return new Buildbot(endpoint, { headers: h });
  }

  var headers = Object.assign({
    'Accept': BUILDBOT_MEDIA_TYPE,
    'User-Agent': _constants.USER_AGENT
  }, h);
  var options = {
    headers: headers
  };

  _adapter.Adapter.call(this);

  this.getInfo = getInfo;
  this.getBuilder = getBuilder;
  this.getBuild = getBuild;
  this.getBuilders = getBuilders;
  this.getBuilds = getBuilds;

  function getInfo() {
    return (0, _fetch2.default)(endpoint + '/json', options).then(_util2.handleResponse).then(makeInfo);
  }

  function getBuilder(info, name) {
    var template = _urlTemplate2.default.parse(info.builders_url);
    var url = template.expand({ name: name });

    return (0, _fetch2.default)(url, options).then(_util2.handleResponse).then(function (data) {
      return makeBuilder(name, data);
    });
  }

  function getBuild(builder, number) {
    var template = _urlTemplate2.default.parse(builder.builds_url);
    var url = template.expand({ number: number });

    return (0, _fetch2.default)(url, options).then(_util2.handleResponse).then(makeBuild);
  }

  function getBuilders(info) {
    var select = info.builders.map(function (name) {
      return name.replace(/\//g, '%2F');
    });
    var template = _urlTemplate2.default.parse(info.builders_url);
    var url = template.expand({ select: select });

    return (0, _fetch2.default)(url, options).then(_util2.handleResponse).then(function (data) {
      return Object.keys(data).map(function (key) {
        return makeBuilder(key, data[key]);
      });
    });
  }

  function getBuilds(builder) {
    var select = builder.builds;
    var template = _urlTemplate2.default.parse(builder.builds_url);
    var url = template.expand({ select: select });

    return (0, _fetch2.default)(url, options).then(_util2.handleResponse).then(uniqueBuilds).then(function (builds) {
      return builds.map(makeBuild);
    });
  }

  function makeInfo(root) {
    var name = root.project.title;
    var builders = Object.keys(root.builders);
    var data = root;

    return {
      name: name,
      url: endpoint + '/json',
      html_url: endpoint,
      builders_url: endpoint + '/json/builders{/name}{?select*}',
      builders: builders,
      data: data
    };
  }

  function makeBuilder(name, builder) {
    var path = encodeURIComponent(name);
    var builds = [-1].concat(builder.cachedBuilds);
    var data = builder;

    return {
      name: name,
      url: endpoint + '/json/builders/' + path,
      html_url: endpoint + '/builders/' + path,
      builds_url: endpoint + '/json/builders/' + path + '/builds{/number}{?select*}',
      builds: builds,
      data: data
    };
  }

  function makeBuild(build) {
    var name = build.builderName;
    var path = encodeURIComponent(name);
    var number = build.number;
    var building = build.times[0] && !build.times[1];
    var data = build;

    return {
      name: name,
      number: number,
      url: endpoint + '/json/builders/' + path + '/builds/' + number,
      html_url: endpoint + '/builders/' + path + '/builds/' + number,
      state: building ? _constants.PENDING : BUILDBOT_STATE_LIST[build.results || 0] || _constants.UNKNOWN,
      start: new Date(build.times[0] * 1000),
      end: building ? null : new Date(build.times[1] * 1000),
      data: data
    };
  }
}
//# sourceMappingURL=data:application/json;base64,