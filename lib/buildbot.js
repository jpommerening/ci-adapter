'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Buildbot;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BUILDBOT_MEDIA_TYPE = 'application/json';
var BUILDBOT_STATE_LIST = [_constants.SUCCESS, _constants.WARNING, _constants.FAILURE, _constants.UNKNOWN, _constants.ERRORED, _constants.ERRORED];

function Buildbot(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;

  var headers = Object.assign({
    'Accept': BUILDBOT_MEDIA_TYPE,
    'User-Agent': _constants.USER_AGENT
  }, h);
  var options = {
    headers: headers
  };

  function getInfo() {
    return (0, _fetch2.default)(endpoint + '/json', options).then(function (response) {
      return response.json();
    }).then(function (root) {
      return {
        name: root.project.title,
        url: endpoint + '/json',
        html_url: endpoint,
        builders_url: endpoint + '/json/builders{/name}',
        builders: Object.keys(root.builders),
        data: root
      };
    });
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var template = _urlTemplate2.default.parse(info.builders_url);
      var url = template.expand({});

      return (0, _fetch2.default)(url, options);
    }).then(function (response) {
      return response.json();
    }).then(function (builders) {
      return Object.keys(builders).map(function (key) {
        var name = key;
        var builder = builders[key];
        var builds = [-1].concat(builder.cachedBuilds);

        return {
          name: name,
          url: endpoint + '/json/builders/' + name,
          html_url: endpoint + '/builders/' + name,
          builds_url: endpoint + '/json/builders/' + name + '/builds{/number}{?select*}',
          builds: builds,
          data: builder
        };
      });
    });
  }

  function getBuilds(builder) {
    var select = builder.builds;
    var template = _urlTemplate2.default.parse(builder.builds_url);
    var url = template.expand({ select: select });

    return (0, _fetch2.default)(url, options).then(function (response) {
      return response.json();
    }).then(function (builds) {
      var numbers = {};

      return Object.keys(builds).map(function (key) {
        return builds[key];
      }).filter(function (_ref2) {
        var number = _ref2.number;

        if (numbers[number]) return false;
        return numbers[number] = true;
      }).map(function (build) {
        var building = build.times[0] && !build.times[1];

        return {
          name: builder.name,
          number: build.number,
          url: endpoint + '/json/builders/' + builder.name + '/builds/' + build.number,
          html_url: endpoint + '/builders/' + builder.name + '/builds/' + build.number,
          state: building ? _constants.PENDING : BUILDBOT_STATE_LIST[build.results || 0] || _constants.UNKNOWN,
          start: new Date(build.times[0] * 1000),
          end: building ? null : new Date(build.times[1] * 1000),
          data: build
        };
      });
    });
  }

  return {
    getInfo: getInfo,
    getBuilders: getBuilders,
    getBuilds: getBuilds
  };
}
//# sourceMappingURL=data:application/json;base64,