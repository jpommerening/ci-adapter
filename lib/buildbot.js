'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BuildBot;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('./url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BUILDBOT_MEDIA_TYPE = 'application/json';

function BuildBot(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;

  var headers = Object.assign({
    Accept: BUILDBOT_MEDIA_TYPE
  }, h);
  var options = {
    headers: headers
  };

  function getInfo() {
    return (0, _fetch2.default)(endpoint + '/json', options).then(function (response) {
      return response.json();
    }).then(function (root) {
      return {
        name: root.project.title,
        url: endpoint + '/json',
        html_url: endpoint,
        builders_url: endpoint + '/json/builders{/name}',
        builders: Object.keys(root.builders)
      };
    });
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var template = _urlTemplate2.default.parse(info.builders_url);
      var url = template.expand({});

      return (0, _fetch2.default)(url, options);
    }).then(function (response) {
      return response.json();
    }).then(function (builders) {
      return Object.keys(builders).map(function (key) {
        var name = key;
        var builder = builders[key];

        return {
          name: name,
          url: endpoint + '/json/builders/' + name,
          html_url: endpoint + '/builders/' + name,
          builds_url: endpoint + '/json/builders/' + name + '/builds{/number}{?select*}',
          data: builder
        };
      });
    });
  }

  function getBuilds(builder) {
    var select = [-1].concat(builder.data.cachedBuilds);
    var template = _urlTemplate2.default.parse(builder.builds_url);
    var url = template.expand({ select: select });

    return (0, _fetch2.default)(url, options).then(function (response) {
      return response.json();
    }).then(function (builds) {
      var numbers = {};

      return Object.keys(builds).map(function (key) {
        return builds[key];
      }).filter(function (_ref2) {
        var number = _ref2.number;

        if (numbers[number]) return false;
        return numbers[number] = true;
      }).map(function (build) {
        return {
          name: builder.name,
          number: build.number,
          url: endpoint + '/json/builders/' + builder.name + '/builds/' + build.number,
          html_url: endpoint + '/builders/' + builder.name + '/builds/' + build.number,
          start: new Date(build.times[0] * 1000),
          end: new Date(build.times[1] * 1000),
          data: build
        };
      });
    });
  }

  function getBuildDetails(build) {}

  return {
    getInfo: getInfo,
    getBuilders: getBuilders,
    getBuilds: getBuilds,
    getBuildDetails: getBuildDetails
  };
}
//# sourceMappingURL=data:application/json;base64,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VCxTQUFTO0FBQ1QsbUJBQWUsRUFBZixlQUFlO0dBQ2hCLENBQUM7Q0FDSCIsImZpbGUiOiJidWlsZGJvdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmZXRjaCBmcm9tICcuL2ZldGNoJztcbmltcG9ydCB1cmx0ZW1wbGF0ZSBmcm9tICcuL3VybC10ZW1wbGF0ZSc7XG5cbmNvbnN0IEJVSUxEQk9UX01FRElBX1RZUEUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJ1aWxkQm90KGVuZHBvaW50LCB7IGhlYWRlcnM6IGggfSA9IHt9KSB7XG4gIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKCB7XG4gICAgQWNjZXB0OiBCVUlMREJPVF9NRURJQV9UWVBFXG4gIH0sIGggKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBoZWFkZXJzXG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0SW5mbygpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7ZW5kcG9pbnR9L2pzb25gLCBvcHRpb25zKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyb290KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogcm9vdC5wcm9qZWN0LnRpdGxlLFxuICAgICAgICAgIHVybDogYCR7ZW5kcG9pbnR9L2pzb25gLFxuICAgICAgICAgIGh0bWxfdXJsOiBlbmRwb2ludCxcbiAgICAgICAgICBidWlsZGVyc191cmw6IGAke2VuZHBvaW50fS9qc29uL2J1aWxkZXJzey9uYW1lfWAsXG4gICAgICAgICAgYnVpbGRlcnM6IE9iamVjdC5rZXlzKHJvb3QuYnVpbGRlcnMpXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ1aWxkZXJzKCkge1xuICAgIHJldHVybiBnZXRJbmZvKClcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdXJsdGVtcGxhdGUucGFyc2UoaW5mby5idWlsZGVyc191cmwpO1xuICAgICAgICBjb25zdCB1cmwgPSB0ZW1wbGF0ZS5leHBhbmQoe30pO1xuXG4gICAgICAgIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGJ1aWxkZXJzKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhidWlsZGVycykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0ga2V5O1xuICAgICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBidWlsZGVyc1sga2V5IF07XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHVybDogYCR7ZW5kcG9pbnR9L2pzb24vYnVpbGRlcnMvJHtuYW1lfWAsXG4gICAgICAgICAgICBodG1sX3VybDogYCR7ZW5kcG9pbnR9L2J1aWxkZXJzLyR7bmFtZX1gLFxuICAgICAgICAgICAgYnVpbGRzX3VybDogYCR7ZW5kcG9pbnR9L2pzb24vYnVpbGRlcnMvJHtuYW1lfS9idWlsZHN7L251bWJlcn17P3NlbGVjdCp9YCxcbiAgICAgICAgICAgIGRhdGE6IGJ1aWxkZXJcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnVpbGRzKGJ1aWxkZXIpIHtcbiAgICBjb25zdCBzZWxlY3QgPSBbIC0xIF0uY29uY2F0KCBidWlsZGVyLmRhdGEuY2FjaGVkQnVpbGRzICk7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB1cmx0ZW1wbGF0ZS5wYXJzZSggYnVpbGRlci5idWlsZHNfdXJsICk7XG4gICAgY29uc3QgdXJsID0gdGVtcGxhdGUuZXhwYW5kKHsgc2VsZWN0IH0pO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoYnVpbGRzKSB7XG4gICAgICAgIGNvbnN0IG51bWJlcnMgPSB7fTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYnVpbGRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBidWlsZHNbIGtleSBdO1xuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHsgbnVtYmVyIH0pIHtcbiAgICAgICAgICBpZiAobnVtYmVyc1sgbnVtYmVyIF0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbnVtYmVyc1sgbnVtYmVyIF0gPSB0cnVlO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGJ1aWxkKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGJ1aWxkZXIubmFtZSxcbiAgICAgICAgICAgIG51bWJlcjogYnVpbGQubnVtYmVyLFxuICAgICAgICAgICAgdXJsOiBgJHtlbmRwb2ludH0vanNvbi9idWlsZGVycy8ke2J1aWxkZXIubmFtZX0vYnVpbGRzLyR7YnVpbGQubnVtYmVyfWAsXG4gICAgICAgICAgICBodG1sX3VybDogYCR7ZW5kcG9pbnR9L2J1aWxkZXJzLyR7YnVpbGRlci5uYW1lfS9idWlsZHMvJHtidWlsZC5udW1iZXJ9YCxcbiAgICAgICAgICAgIHN0YXJ0OiBuZXcgRGF0ZShidWlsZC50aW1lc1sgMCBdICogMTAwMCksXG4gICAgICAgICAgICBlbmQ6IG5ldyBEYXRlKGJ1aWxkLnRpbWVzWyAxIF0gKiAxMDAwKSxcbiAgICAgICAgICAgIGRhdGE6IGJ1aWxkXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ1aWxkRGV0YWlscyhidWlsZCkge1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRJbmZvLFxuICAgIGdldEJ1aWxkZXJzLFxuICAgIGdldEJ1aWxkcyxcbiAgICBnZXRCdWlsZERldGFpbHNcbiAgfTtcbn1cbiJdfQ==