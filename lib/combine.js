'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combine = combine;

var _adapter = require('./adapter');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function combine() {
  for (var _len = arguments.length, adapters = Array(_len), _key = 0; _key < _len; _key++) {
    adapters[_key] = arguments[_key];
  }

  var map = new WeakMap();

  var adapter = new _adapter.Adapter();
  adapter.getInfo = getInfo;
  adapter.getBuilder = getBuilder;
  adapter.getBuild = getBuild;
  adapter.getBuilders = getBuilders;
  adapter.getBuilds = getBuilds;
  return adapter;

  function getInfo() {
    return Promise.all(adapters.map(function (adapter) {
      return adapter.getInfo().then(addToMap(adapter));
    })).then(makeInfo);
  }

  function getBuilder(info, name) {
    var infos = info.data.filter(function (info) {
      return info.builders.indexOf(name) >= 0;
    });
    return Promise.all(infos.map(function (info) {
      var adapter = adapterFor(info);
      return adapter.getBuilder(info, name).then(addToMap(adapter));
    })).then(makeBuilder);
  }

  function getBuild(builder, number) {
    var builders = builder.data.filter(function (builder) {
      return builder.builds.indexOf(number) >= 0;
    });
    return Promise.all(builders.map(function (builder) {
      var adapter = adapterFor(builder);
      return adapter.getBuild(builder, number).then(addToMap(adapter));
    })).then(makeBuild);
  }

  function getBuilders(info) {
    var infos = info.data;
    return Promise.all(infos.map(function (info) {
      var adapter = adapterFor(info);
      return adapter.getBuilders(info).then(addAllToMap(adapter));
    })).then(function (lists) {
      var _ref;

      return (_ref = []).concat.apply(_ref, _toConsumableArray(lists));
    }).then(function (builders) {
      return builders.map(function (builder) {
        return makeBuilder([builder]);
      });
    });
  }

  function getBuilds(builder) {
    var builders = builder.data;
    return Promise.all(builders.map(function (builder) {
      var adapter = adapterFor(builder);
      return adapter.getBuilds(builder).then(addAllToMap(adapter));
    })).then(function (lists) {
      var _ref2;

      return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(lists));
    }).then(function (builds) {
      return builds.map(function (build) {
        return makeBuild([build]);
      });
    });
  }

  function addToMap(adapter) {
    return function (item) {
      map.set(item, adapter);
      return item;
    };
  }

  function addAllToMap(adapter) {
    var add = addToMap(adapter);
    return function (iterable) {
      return iterable.map(add);
    };
  }

  function adapterFor(item) {
    return map.get(item);
  }

  function makeInfo(infos) {
    var names = infos.map(function (info) {
      return info.name;
    });
    var builders = infos.map(function (info) {
      return info.builders;
    });

    return {
      name: names.join(', '),
      builders: [].concat.apply([], builders),
      data: infos
    };
  }

  function makeBuilder(builders) {
    var first = builders && builders[0] || {};

    return {
      name: first.name,
      url: first.url,
      html_url: first.html_url,
      builds: [].concat.apply([], builders.map(function (builder) {
        return builder.builds;
      })).filter(function (k) {
        if (this[k]) return false;
        return this[k] = true;
      }, {}),
      data: builders
    };
  }

  function makeBuild(builds) {
    var first = builders && builders[0] || {};

    return {
      name: first.name,
      number: first.number,
      url: first.url,
      html_url: first.html_url,
      state: first.state,
      start: first.start,
      end: first.end,
      data: builds
    };
  }
}
//# sourceMappingURL=data:application/json;base64,