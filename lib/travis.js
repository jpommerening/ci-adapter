'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Travis;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('./url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TRAVIS_MEDIA_TYPE = 'application/vnd.travis-ci.2+json';
var TRAVIS_HTML_URL = /^(https?:\/\/)(api\.(travis-ci\.(org|com))|([^\/]+)\/api)(\/.+)?$/;

function getHtmlUrl(url) {
  var match = TRAVIS_HTML_URL.exec(url);
  return match[1] + (match[3] || match[5]) + (match[6] || '');
}

function Travis(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;
  var github_token = _ref.github_token;
  var account = _ref.account;

  var headers = Object.assign({
    Accept: TRAVIS_MEDIA_TYPE
  }, h);
  var options = {
    headers: headers
  };
  var html_url = getHtmlUrl(endpoint);

  function getToken() {
    return (0, _fetch2.default)(endpoint + '/auth/github', {
      method: 'post',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ github_token: github_token })
    }).then(function (response) {
      return response.json();
    }).then(function (_ref2) {
      var access_token = _ref2.access_token;

      options.headers['Authorization'] = 'token ' + access_token;
      return access_token;
    });
  }

  function getInfo() {
    return getToken().then(function (token) {
      return (0, _fetch2.default)(endpoint + '/repos/' + account, options);
    }).then(function (response) {
      return response.json();
    }).then(function (data) {
      return {
        name: 'Travis CI - ' + account + ' (' + endpoint + ')',
        url: endpoint + '/repos/' + account,
        html_url: html_url + '/' + account,
        builders_url: endpoint + '/repos/' + account + '{/name}{?ids}',
        builders: data.repos.map(function (repo) {
          return repo.slug.split('/')[1];
        }),
        data: data
      };
    });
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var repos = info.data.repos.filter(function (repo) {
        return repo.last_build_number !== null;
      });
      return repos.map(function (repo) {
        var slug = repo.slug;
        var name = slug.split('/')[1];

        return {
          name: name,
          url: endpoint + '/repos/' + slug,
          html_url: html_url + '/' + slug,
          builds_url: endpoint + '/repos/' + slug + '/builds{?number,after_number}',
          builds: [parseInt(repo.last_build_number, 10)],
          data: repo
        };
      });
    });
  }

  function getBuilds(builder) {
    return Promise.all(builder.builds.map(function (number) {
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ number: number });

      return (0, _fetch2.default)(url, options).then(function (response) {
        return response.json();
      });
    })).then(function (data) {
      var builds = [].concat.apply([], data.map(function (data) {
        return data.builds;
      }));

      return builds.map(function (build) {
        return {
          name: builder.name,
          number: parseInt(build.number, 10),
          url: endpoint + '/repos/' + account + '/' + builder.name + '/builds/' + build.id,
          html_url: html_url + '/' + account + '/' + builder.name + '/builds/' + build.id,
          start: new Date(build.started_at),
          end: new Date(build.finished_at),
          data: build
        };
      });
    });
  }

  function getBuildDetails(build) {}

  return {
    getInfo: getInfo,
    getBuilders: getBuilders,
    getBuilds: getBuilds,
    getBuildDetails: getBuildDetails
  };
}
//# sourceMappingURL=data:application/json;base64,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Q0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQ3ZCLFVBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTtlQUFJLElBQUksQ0FBQyxNQUFNO09BQUEsQ0FBQyxDQUFFLENBQUM7O0FBRXBFLGFBQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssRUFBRTtBQUNqQyxlQUFPO0FBQ0wsY0FBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0FBQ2xCLGdCQUFNLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0FBQ2xDLGFBQUcsRUFBSyxRQUFRLGVBQVUsT0FBTyxTQUFJLE9BQU8sQ0FBQyxJQUFJLGdCQUFXLEtBQUssQ0FBQyxFQUFFLEFBQUU7QUFDdEUsa0JBQVEsRUFBSyxRQUFRLFNBQUksT0FBTyxTQUFJLE9BQU8sQ0FBQyxJQUFJLGdCQUFXLEtBQUssQ0FBQyxFQUFFLEFBQUU7QUFDckUsZUFBSyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFDakMsYUFBRyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDaEMsY0FBSSxFQUFFLEtBQUs7U0FDWixDQUFDO09BQ0gsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBQ0o7O0FBRUQsV0FBUyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQy9COztBQUVELFNBQU87QUFDTCxXQUFPLEVBQVAsT0FBTztBQUNQLGVBQVcsRUFBWCxXQUFXO0FBQ1gsYUFBUyxFQUFULFNBQVM7QUFDVCxtQkFBZSxFQUFmLGVBQWU7R0FDaEIsQ0FBQztDQUNIIiwiZmlsZSI6InRyYXZpcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmZXRjaCBmcm9tICcuL2ZldGNoJztcbmltcG9ydCB1cmx0ZW1wbGF0ZSBmcm9tICcuL3VybC10ZW1wbGF0ZSc7XG5cbmNvbnN0IFRSQVZJU19NRURJQV9UWVBFID0gJ2FwcGxpY2F0aW9uL3ZuZC50cmF2aXMtY2kuMitqc29uJztcbmNvbnN0IFRSQVZJU19IVE1MX1VSTCA9IC9eKGh0dHBzPzpcXC9cXC8pKGFwaVxcLih0cmF2aXMtY2lcXC4ob3JnfGNvbSkpfChbXlxcL10rKVxcL2FwaSkoXFwvLispPyQvO1xuXG5mdW5jdGlvbiBnZXRIdG1sVXJsKHVybCkge1xuICBjb25zdCBtYXRjaCA9IFRSQVZJU19IVE1MX1VSTC5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaFsxXSArIChtYXRjaFszXSB8fCBtYXRjaFs1XSkgKyAobWF0Y2hbNl0gfHwgJycpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUcmF2aXMoZW5kcG9pbnQsIHsgaGVhZGVyczogaCwgZ2l0aHViX3Rva2VuLCBhY2NvdW50IH0gPSB7fSkge1xuICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbigge1xuICAgIEFjY2VwdDogVFJBVklTX01FRElBX1RZUEVcbiAgfSwgaCApO1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGhlYWRlcnNcbiAgfTtcbiAgY29uc3QgaHRtbF91cmwgPSBnZXRIdG1sVXJsKGVuZHBvaW50KTtcblxuICBmdW5jdGlvbiBnZXRUb2tlbigpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7ZW5kcG9pbnR9L2F1dGgvZ2l0aHViYCwge1xuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGdpdGh1Yl90b2tlbiB9KVxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHsgYWNjZXNzX3Rva2VuIH0pIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVyc1sgJ0F1dGhvcml6YXRpb24nIF0gPSBgdG9rZW4gJHthY2Nlc3NfdG9rZW59YDtcbiAgICAgIHJldHVybiBhY2Nlc3NfdG9rZW47XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbmZvKCkge1xuICAgIHJldHVybiBnZXRUb2tlbigpXG4gICAgICAudGhlbihmdW5jdGlvbih0b2tlbikge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7ZW5kcG9pbnR9L3JlcG9zLyR7YWNjb3VudH1gLCBvcHRpb25zKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogYFRyYXZpcyBDSSAtICR7YWNjb3VudH0gKCR7ZW5kcG9pbnR9KWAsXG4gICAgICAgICAgdXJsOiBgJHtlbmRwb2ludH0vcmVwb3MvJHthY2NvdW50fWAsXG4gICAgICAgICAgaHRtbF91cmw6IGAke2h0bWxfdXJsfS8ke2FjY291bnR9YCxcbiAgICAgICAgICBidWlsZGVyc191cmw6IGAke2VuZHBvaW50fS9yZXBvcy8ke2FjY291bnR9ey9uYW1lfXs/aWRzfWAsXG4gICAgICAgICAgYnVpbGRlcnM6IGRhdGEucmVwb3MubWFwKHJlcG8gPT4gcmVwby5zbHVnLnNwbGl0KCcvJylbMV0pLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnVpbGRlcnMoKSB7XG4gICAgcmV0dXJuIGdldEluZm8oKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgY29uc3QgcmVwb3MgPSBpbmZvLmRhdGEucmVwb3MuZmlsdGVyKHJlcG8gPT4gcmVwby5sYXN0X2J1aWxkX251bWJlciAhPT0gbnVsbCk7XG4gICAgICAgIHJldHVybiByZXBvcy5tYXAoZnVuY3Rpb24gKHJlcG8pIHtcbiAgICAgICAgICBjb25zdCBzbHVnID0gcmVwby5zbHVnO1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSBzbHVnLnNwbGl0KCcvJylbMV07XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHVybDogYCR7ZW5kcG9pbnR9L3JlcG9zLyR7c2x1Z31gLFxuICAgICAgICAgICAgaHRtbF91cmw6IGAke2h0bWxfdXJsfS8ke3NsdWd9YCxcbiAgICAgICAgICAgIGJ1aWxkc191cmw6IGAke2VuZHBvaW50fS9yZXBvcy8ke3NsdWd9L2J1aWxkc3s/bnVtYmVyLGFmdGVyX251bWJlcn1gLFxuICAgICAgICAgICAgYnVpbGRzOiBbIHBhcnNlSW50KCByZXBvLmxhc3RfYnVpbGRfbnVtYmVyLCAxMCApIF0sXG4gICAgICAgICAgICBkYXRhOiByZXBvXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ1aWxkcyhidWlsZGVyKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGJ1aWxkZXIuYnVpbGRzLm1hcChmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHVybHRlbXBsYXRlLnBhcnNlKCBidWlsZGVyLmJ1aWxkc191cmwgKTtcbiAgICAgIGNvbnN0IHVybCA9IHRlbXBsYXRlLmV4cGFuZCh7IG51bWJlciB9KTtcblxuICAgICAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0pO1xuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBjb25zdCBidWlsZHMgPSBbXS5jb25jYXQuYXBwbHkoIFtdLCBkYXRhLm1hcChkYXRhID0+IGRhdGEuYnVpbGRzKSApO1xuXG4gICAgICByZXR1cm4gYnVpbGRzLm1hcChmdW5jdGlvbiAoYnVpbGQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiBidWlsZGVyLm5hbWUsXG4gICAgICAgICAgbnVtYmVyOiBwYXJzZUludChidWlsZC5udW1iZXIsIDEwKSxcbiAgICAgICAgICB1cmw6IGAke2VuZHBvaW50fS9yZXBvcy8ke2FjY291bnR9LyR7YnVpbGRlci5uYW1lfS9idWlsZHMvJHtidWlsZC5pZH1gLFxuICAgICAgICAgIGh0bWxfdXJsOiBgJHtodG1sX3VybH0vJHthY2NvdW50fS8ke2J1aWxkZXIubmFtZX0vYnVpbGRzLyR7YnVpbGQuaWR9YCxcbiAgICAgICAgICBzdGFydDogbmV3IERhdGUoYnVpbGQuc3RhcnRlZF9hdCksXG4gICAgICAgICAgZW5kOiBuZXcgRGF0ZShidWlsZC5maW5pc2hlZF9hdCksXG4gICAgICAgICAgZGF0YTogYnVpbGRcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnVpbGREZXRhaWxzKGJ1aWxkKSB7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEluZm8sXG4gICAgZ2V0QnVpbGRlcnMsXG4gICAgZ2V0QnVpbGRzLFxuICAgIGdldEJ1aWxkRGV0YWlsc1xuICB9O1xufVxuIl19