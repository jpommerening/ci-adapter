'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Travis;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _util = require('./util');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TRAVIS_API_VERSION = 2;
var TRAVIS_MEDIA_TYPE = 'application/vnd.travis-ci.' + TRAVIS_API_VERSION + '+json';
var TRAVIS_USER_AGENT = 'Travis/' + TRAVIS_API_VERSION + ' ' + _constants.USER_AGENT;
var TRAVIS_HTML_URL = /^(https?:\/\/)(api\.(travis-ci\.(org|com))|([^\/]+)\/api)(\/.+)?$/;
var TRAVIS_STATE_MAP = {
  received: _constants.PENDING,
  created: _constants.PENDING,
  queued: _constants.PENDING,
  started: _constants.PENDING,
  passed: _constants.SUCCESS,
  failed: _constants.FAILURE,
  errored: _constants.ERRORED,
  canceled: _constants.ABORTED
};

function getHtmlUrl(url) {
  var match = TRAVIS_HTML_URL.exec(url);
  return match[1] + (match[3] || match[5]) + (match[6] || '');
}

function Travis(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;
  var github_token = _ref.github_token;
  var account = _ref.account;

  var headers = Object.assign({
    'Accept': TRAVIS_MEDIA_TYPE,
    'User-Agent': TRAVIS_USER_AGENT
  }, h);
  var options = {
    headers: headers
  };
  var html_url = getHtmlUrl(endpoint);
  var token = undefined;

  function getToken(github_token) {
    return token || (token = (0, _fetch2.default)(endpoint + '/auth/github', {
      method: 'post',
      headers: Object.assign({}, options.headers, {
        'Content-Type': 'application/json'
      }),
      body: JSON.stringify({ github_token: github_token })
    }).then(function (response) {
      if (response.status !== 200) {
        return response.text().then(function (text) {
          return Promise.reject(new Error(text));
        });
      }
      return response.json();
    }).then(function (_ref2) {
      var access_token = _ref2.access_token;

      options.headers['Authorization'] = 'token ' + access_token;
      return access_token;
    }));
  }

  function getInfo() {
    return (github_token ? getToken(github_token) : Promise.resolve(null)).then(function () {
      return (0, _fetch2.default)(endpoint + '/repos/' + account, options);
    }).then(_util.handleResponse).then(makeInfo);
  }

  function getBuilder(name) {
    return getInfo().then(function (info) {
      var repo = info.data.repos.find(function (repo) {
        return repo.slug.split('/').pop() === name;
      });
      return makeBuilder(repo);
    });
  }

  function getBuild(name, number) {
    return getBuilder(name).then(function (builder) {
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ number: number });

      return (0, _fetch2.default)(url, options).then(_util.handleResponse).then(function (data) {
        return makeBuild(builder.data, data.builds[0]);
      });
    });
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var repos = info.data.repos.filter(function (repo) {
        return info.builders.indexOf(repo.slug.split('/').pop() >= 0);
      });
      return repos.map(makeBuilder);
    });
  }

  function getBuilds(name) {
    return getBuilder(name).then(function (builder) {
      return Promise.all(builder.builds.map(function (number) {
        return getBuild(name, number);
      }));
    });
  }

  function makeInfo(data) {
    var name = 'Travis CI - ' + account + ' (' + endpoint + ')';
    var builders = data.repos.filter(function (repo) {
      return repo.last_build_number !== null;
    }).map(function (repo) {
      return repo.slug.split('/')[1];
    });

    return {
      name: name,
      url: endpoint + '/repos/' + account,
      html_url: html_url + '/' + account,
      builders_url: endpoint + '/repos/' + account + '{/name}{?ids}',
      builders: builders,
      data: data
    };
  }

  function makeBuilder(repo) {
    var slug = repo.slug;
    var name = slug.split('/').pop();
    var last = parseInt(repo.last_build_number, 10);
    var builds = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function (x) {
      return last - x;
    }).filter(function (x) {
      return x >= 0;
    });
    var data = repo;

    return {
      name: name,
      url: endpoint + '/repos/' + slug,
      html_url: html_url + '/' + slug,
      builds_url: endpoint + '/repos/' + slug + '/builds{?number,after_number}',
      builds: builds,
      data: data
    };
  }

  function makeBuild(repo, build) {
    var slug = repo.slug;
    var name = slug.split('/').pop();
    var number = parseInt(build.number, 10);
    var building = TRAVIS_STATE_MAP[build.state] === _constants.PENDING;
    var data = build;

    return {
      name: name,
      number: number,
      url: endpoint + '/repos/' + slug + '/builds/' + build.id,
      html_url: html_url + '/' + slug + '/builds/' + build.id,
      state: TRAVIS_STATE_MAP[build.state],
      start: new Date(build.started_at),
      end: building ? null : new Date(build.finished_at),
      data: data
    };
  }

  return {
    getInfo: getInfo,
    getBuilder: getBuilder,
    getBuilders: getBuilders,
    getBuild: getBuild,
    getBuilds: getBuilds
  };
}
//# sourceMappingURL=data:application/json;base64,