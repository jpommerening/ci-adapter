'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Travis;

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _urlTemplate = require('url-template');

var _urlTemplate2 = _interopRequireDefault(_urlTemplate);

var _adapter = require('./adapter');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TRAVIS_MEDIA_TYPE = 'application/vnd.travis-ci.2+json';
var TRAVIS_HTML_URL = /^(https?:\/\/)(api\.(travis-ci\.(org|com))|([^\/]+)\/api)(\/.+)?$/;
var TRAVIS_STATE_MAP = {
  received: _adapter.PENDING,
  created: _adapter.PENDING,
  queued: _adapter.PENDING,
  started: _adapter.PENDING,
  passed: _adapter.SUCCESS,
  failed: _adapter.FAILURE,
  errored: _adapter.ERRORED,
  canceled: _adapter.ABORTED
};

function getHtmlUrl(url) {
  var match = TRAVIS_HTML_URL.exec(url);
  return match[1] + (match[3] || match[5]) + (match[6] || '');
}

function Travis(endpoint) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var h = _ref.headers;
  var github_token = _ref.github_token;
  var account = _ref.account;

  var headers = Object.assign({
    Accept: TRAVIS_MEDIA_TYPE
  }, h);
  var options = {
    headers: headers
  };
  var html_url = getHtmlUrl(endpoint);

  function getToken() {
    return (0, _fetch2.default)(endpoint + '/auth/github', {
      method: 'post',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ github_token: github_token })
    }).then(function (response) {
      return response.json();
    }).then(function (_ref2) {
      var access_token = _ref2.access_token;

      options.headers['Authorization'] = 'token ' + access_token;
      return access_token;
    });
  }

  function getInfo() {
    return getToken().then(function (token) {
      return (0, _fetch2.default)(endpoint + '/repos/' + account, options);
    }).then(function (response) {
      return response.json();
    }).then(function (data) {
      return {
        name: 'Travis CI - ' + account + ' (' + endpoint + ')',
        url: endpoint + '/repos/' + account,
        html_url: html_url + '/' + account,
        builders_url: endpoint + '/repos/' + account + '{/name}{?ids}',
        builders: data.repos.map(function (repo) {
          return repo.slug.split('/')[1];
        }),
        data: data
      };
    });
  }

  function getBuilders() {
    return getInfo().then(function (info) {
      var repos = info.data.repos.filter(function (repo) {
        return repo.last_build_number !== null;
      });
      return repos.map(function (repo) {
        var slug = repo.slug;
        var name = slug.split('/')[1];
        var last = parseInt(repo.last_build_number, 10);
        var builds = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function (x) {
          return last - x;
        }).filter(function (x) {
          return x >= 0;
        });

        return {
          name: name,
          url: endpoint + '/repos/' + slug,
          html_url: html_url + '/' + slug,
          builds_url: endpoint + '/repos/' + slug + '/builds{?number,after_number}',
          builds: builds,
          data: repo
        };
      });
    });
  }

  function getBuilds(builder) {
    return Promise.all(builder.builds.map(function (number) {
      var template = _urlTemplate2.default.parse(builder.builds_url);
      var url = template.expand({ number: number });

      return (0, _fetch2.default)(url, options).then(function (response) {
        return response.json();
      });
    })).then(function (data) {
      var builds = [].concat.apply([], data.map(function (data) {
        return data.builds;
      }));

      return builds.map(function (build) {
        var building = TRAVIS_STATE_MAP[build.state] === _adapter.PENDING;

        return {
          name: builder.name,
          number: parseInt(build.number, 10),
          url: endpoint + '/repos/' + account + '/' + builder.name + '/builds/' + build.id,
          html_url: html_url + '/' + account + '/' + builder.name + '/builds/' + build.id,
          state: TRAVIS_STATE_MAP[build.state],
          start: new Date(build.started_at),
          end: building ? null : new Date(build.finished_at),
          data: build
        };
      });
    });
  }

  return {
    getInfo: getInfo,
    getBuilders: getBuilders,
    getBuilds: getBuilds
  };
}
//# sourceMappingURL=data:application/json;base64,